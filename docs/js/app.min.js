!function(){"use strict";function t(o){console.log("onGlslError.error",o.error);var l=window.options,a=[],i=[];o.error.replace(/ERROR: \d+:(\d+): \'(.+)\' : (.+)/g,function(e,r,t,n){var s="ERROR ("+t+") "+n,o='<li><a class="error" unselectable href="'+encodeURI("command:glsl-canvas.revealGlslLine?"+JSON.stringify([l.uri,Number(r),s]))+'"><span class="line">ERROR line '+Number(r)+'</span> <span class="value" title="'+t+'">'+t+'</span> <span class="text" title="'+n+'">'+n+"</span></a></li>";return a.push(o),o}),o.error.replace(/WARNING: \d+:(\d+): \'(.*\n*|.*|\n*)\' : (.+)/g,function(e,r,t,n){var s='<li><a class="warning" unselectable href="'+encodeURI("command:glsl-canvas.revealGlslLine?"+JSON.stringify([l.uri,Number(r),o]))+'"><span class="line">WARN line '+Number(r)+'</span> <span class="text" title="'+n+'">'+n+"</span></a></li>";return i.push(s),s});var e='<div class="errors-content"><p>glslCanvas error</p><ul>';e+=a.join("\n"),e+=i.join("\n"),e+="</ul></div>",document.querySelector(".errors").setAttribute("class","errors active"),document.querySelector(".errors").innerHTML=e,document.querySelector("body").setAttribute("class","idle")}window.options={vertex:"",fragment:document.getElementById("fragment").innerHTML},window.addEventListener("load",function(){var n=document.querySelector(".content"),s=document.querySelector(".shader");r(!0);var e,o=new GlslCanvas(s,{premultipliedAlpha:!1,preserveDrawingBuffer:!0,backgroundColor:"rgba(1,1,1,1)"});function r(e){var r=n.offsetWidth,t=n.offsetHeight;s.style.width=r+"px",s.style.height=t+"px",e?(s.width=r,s.height=t):o.resize()}o.on("error",t),o.on("render",function(){o.forceRender=!0}),function(){var e=window.options;if(document.querySelector(".errors").setAttribute("class","errors"),document.querySelector(".welcome").setAttribute("class","welcome"),e.vertex=0<e.vertex.trim().length?e.vertex:null,e.fragment=0<e.fragment.trim().length?e.fragment:null,e.fragment||e.vertex?document.querySelector("body").setAttribute("class","ready"):document.querySelector("body").setAttribute("class","empty"),o.load(e.fragment,e.vertex),e.textures)for(var r in e.textures)o.uniformTexture("u_texture_"+r,e.textures[r],{filtering:"mipmap",repeat:!0});console.log("glsl",o)}(),window.addEventListener("resize",function(){e&&clearTimeout(e),e=setTimeout(r,50)}),r()})}();
//# sourceMappingURL=app.min.js.map
