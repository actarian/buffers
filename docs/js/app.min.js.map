{"version":3,"sources":["docs/js/app.js"],"names":["GlslCanvasWrapper","GlslCanvas","prototype","TEXTURE_COUNT","BUFFER_COUNT","createBuffer","W","H","glsl","this","gl","index","activeTexture","TEXTURE0","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","RGBA","UNSIGNED_BYTE","buffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","w","h","clear","COLOR_BUFFER_BIT","createSwappableBuffer","loadBuffers","buffers","vertex","createShader","vertexString","VERTEX_SHADER","key","fragment","common","FRAGMENT_SHADER","isValid","program","createProgram","bundle","canvas","width","height","deleteShader","i","loadUniforms","options","textures","uniformTexture","filtering","repeat","updateVariables","date","Date","now","performance","variables","prev","delta","load","timeLoad","time","year","getFullYear","month","getMonth","getDate","daytime","getHours","getMinutes","getSeconds","getMilliseconds","UpdateUniforms","useProgram","uniform2f","getUniformLocation","nTime","uniform1f","nDelta","nDate","uniform4f","uniform1i","input","resizeBuffers","Object","keys","length","textureOut","textureIn","renderGl","render","drawArrays","TRIANGLES","visible","getBoundingClientRect","top","window","innerHeight","document","documentElement","clientHeight","forceRender","animated","paused","change","trigger","setMouse","mouse","rect","x","left","right","y","bottom","_resize","resize","output","swap","temp","copyTexImage2D","source","type","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","lastError","getShaderInfoLog","console","error","shaders","optAttribs","optLocations","attachShader","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","log","deleteProgram","blit","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexAttribPointer","FLOAT","enableVertexAttribArray","destination","drawElements","UNSIGNED_SHORT","apply","main","onGlslError","message","errors","warnings","replace","m","l","v","t","li","encodeURI","JSON","stringify","uri","Number","push","join","querySelector","setAttribute","innerHTML","addEventListener","url","callback","request","RegExp","match","name","content","ri","premultipliedAlpha","preserveDrawingBuffer","backgroundColor","init","offsetWidth","offsetHeight","style","on","trim","clearTimeout","setTimeout","createCanvas","XMLHttpRequest","open","responseText","send"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global window, document, console, GlslCanvas, CaptureService, GuiService, TrailsService, CameraService, Stats, dat */\n\n(function () {\n    'use strict';\n\n    var GlslCanvasWrapper = function () {\n\n        function GlslCanvasWrapper(canvas, options) {\n            return new GlslCanvas(canvas, options);\n        }\n\n        GlslCanvas.prototype.TEXTURE_COUNT = 0;\n        GlslCanvas.prototype.BUFFER_COUNT = 0;\n        GlslCanvas.prototype.createBuffer = createBuffer;\n        GlslCanvas.prototype.createSwappableBuffer = createSwappableBuffer;\n        GlslCanvas.prototype.loadBuffers = loadBuffers;\n        GlslCanvas.prototype.loadUniforms = loadUniforms;\n        GlslCanvas.prototype.updateVariables = updateVariables;\n        GlslCanvas.prototype.UpdateUniforms = UpdateUniforms;\n        GlslCanvas.prototype.resizeBuffers = resizeBuffers;\n        GlslCanvas.prototype.renderGl = renderGl;\n        GlslCanvas.prototype.render = render;\n\n        var _setMouse = GlslCanvas.prototype.setMouse;\n        GlslCanvas.prototype.setMouse = setMouse;\n\n        var _resize = GlslCanvas.prototype.resize;\n        GlslCanvas.prototype.resize = resize;\n\n        // GlslCanvas.prototype.uniform = uniform;\n\n        function createBuffer(W, H) {\n            var glsl = this,\n                gl = glsl.gl,\n                index = glsl.TEXTURE_COUNT + glsl.BUFFER_COUNT;\n            glsl.BUFFER_COUNT++;\n            gl.activeTexture(gl.TEXTURE0 + index);\n            var texture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n            var buffer = gl.createFramebuffer();\n            gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n            gl.viewport(0, 0, w, h);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n            return {\n                index: index,\n                texture: texture,\n                buffer: buffer,\n            };\n        }\n\n        function createSwappableBuffer(W, H) {\n            var glsl = this,\n                gl = glsl.gl;\n            var input = glsl.createBuffer(W, H);\n            var output = glsl.createBuffer(W, H);\n            return {\n                input: input,\n                output: output,\n                swap: function () {\n                    var temp = input;\n                    input = output;\n                    output = temp;\n                    this.input = input;\n                    this.output = output;\n                },\n                render: function (W, H, program) {\n                    gl.useProgram(program);\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, input.buffer);\n                    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, output.texture, 0);\n                    gl.activeTexture(output.index); //           <-- out activate\n                    gl.bindTexture(gl.TEXTURE_2D, output.texture); //       <-- out bind\n                    gl.viewport(0, 0, W, H);\n                    gl.drawArrays(gl.TRIANGLES, 0, 6); //               <-- out draw\n                    gl.activeTexture(input.index); //                   <-- in activate\n                    gl.bindTexture(gl.TEXTURE_2D, input.texture); //                    <-- in bind\n                    gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, W, H, 0); // <-- in copy\n                    this.swap();\n                },\n            };\n        }\n\n        function loadBuffers(buffers) {\n            var glsl = this,\n                gl = glsl.gl,\n                i = 0;\n            glsl.buffers = {};\n            var vertex = createShader(glsl, glsl.vertexString, gl.VERTEX_SHADER);\n            for (var key in buffers) {\n                var buffer = buffers[key];\n                var fragment = createShader(glsl, buffer.common + buffer.fragment, gl.FRAGMENT_SHADER);\n                if (!fragment) {\n                    fragment = createShader(glsl, 'void main(){\\n\\tgl_FragColor = vec4(1.0);\\n}', gl.FRAGMENT_SHADER);\n                    glsl.isValid = false;\n                } else {\n                    glsl.isValid = true;\n                }\n                var program = createProgram(glsl, [vertex, fragment]);\n                buffer.program = program;\n                buffer.bundle = createSwappableBuffer(glsl.canvas.width, glsl.canvas.height);\n                // console.log(i, key, buffer.common + buffer.fragment, buffer.bundle);\n                glsl.buffers[key] = buffer;\n                gl.deleteShader(fragment);\n                i++;\n            }\n            gl.deleteShader(vertex);\n        }\n\n        function _loadBuffers(buffers) {\n            var glsl = this,\n                gl = glsl.gl,\n                i = 0;\n            glsl.buffers = {};\n            gl.bundle = function (program, i, W, H) {\n                gl.useProgram(program);\n                var textureOut = gl.createTexture();\n                gl.activeTexture(gl.TEXTURE0 + i * 2); //           <-- out activate\n                gl.bindTexture(gl.TEXTURE_2D, textureOut);\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                var textureIn = gl.createTexture();\n                gl.activeTexture(gl.TEXTURE0 + i * 2 + 1); //       <-- in activate\n                gl.bindTexture(gl.TEXTURE_2D, textureIn);\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                var buffer = gl.createFramebuffer();\n                return {\n                    textureIn: textureIn,\n                    textureOut: textureOut,\n                    render: function (W, H) {\n                        gl.useProgram(program);\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);\n                        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureOut, 0);\n                        gl.activeTexture(gl.TEXTURE0 + i * 2); //           <-- out activate\n                        gl.bindTexture(gl.TEXTURE_2D, textureOut); //       <-- out bind\n                        gl.viewport(0, 0, W, H);\n                        gl.drawArrays(gl.TRIANGLES, 0, 6); //               <-- out draw\n                        gl.activeTexture(gl.TEXTURE0 + i * 2 + 1); //                   <-- in activate\n                        gl.bindTexture(gl.TEXTURE_2D, textureIn); //                    <-- in bind\n                        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, W, H, 0); // <-- in copy                        \n                    }\n                };\n            };\n\n            var vertex = createShader(glsl, glsl.vertexString, gl.VERTEX_SHADER);\n            for (var key in buffers) {\n                var buffer = buffers[key];\n                var fragment = createShader(glsl, buffer.common + buffer.fragment, gl.FRAGMENT_SHADER);\n                if (!fragment) {\n                    fragment = createShader(glsl, 'void main(){\\n\\tgl_FragColor = vec4(1.0);\\n}', gl.FRAGMENT_SHADER);\n                    glsl.isValid = false;\n                } else {\n                    glsl.isValid = true;\n                }\n                var program = createProgram(glsl, [vertex, fragment]);\n                buffer.program = program;\n                buffer.bundle = gl.bundle(program, i, glsl.canvas.width, glsl.canvas.height);\n                // console.log(i, key, buffer.common + buffer.fragment, buffer.bundle);\n                glsl.buffers[key] = buffer;\n                gl.deleteShader(fragment);\n                i++;\n            }\n            gl.deleteShader(vertex);\n        }\n\n        function resize() {\n            var glsl = this;\n            var flag = _resize.apply(glsl);\n            /*\n            if (flag) {\n                glsl.resizeBuffers();\n            }\n            */\n            return flag;\n        }\n\n        function resizeBuffers() {\n            var glsl = this,\n                gl = glsl.gl;\n            if (glsl.buffers && Object.keys(glsl.buffers).length > 0) {\n                var i = 0,\n                    W = gl.canvas.width,\n                    H = gl.canvas.height;\n                gl.viewport(0, 0, W, H);\n                for (var key in glsl.buffers) {\n                    var buffer = glsl.buffers[key];\n                    gl.useProgram(buffer.program);\n                    // \n                    gl.activeTexture(gl.TEXTURE0 + i * 2);\n                    gl.bindTexture(gl.TEXTURE_2D, buffer.bundle.textureOut);\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                    // \n                    gl.activeTexture(gl.TEXTURE0 + i * 2 + 1);\n                    gl.bindTexture(gl.TEXTURE_2D, buffer.bundle.textureIn);\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                    i++;\n                }\n                gl.useProgram(glsl.program);\n            }\n        }\n\n        function loadUniforms(options) {\n            if (options.textures) {\n                for (var key in options.textures) {\n                    glsl.uniformTexture('u_texture_' + key, options.textures[key], {\n                        filtering: 'mipmap',\n                        repeat: true,\n                    });\n                }\n            }\n        }\n\n        function setMouse(mouse) {\n            // _setMouse(mouse);\n            var glsl = this,\n                gl = glsl.gl;\n            var rect = this.canvas.getBoundingClientRect();\n            if (mouse && mouse.x && mouse.x >= rect.left && mouse.x <= rect.right && mouse.y && mouse.y >= rect.top && mouse.y <= rect.bottom) {\n                var x = mouse.x - rect.left;\n                var y = this.canvas.height - (mouse.y - rect.top);\n                // this.uniform('2f', 'vec2', 'u_mouse', x, y);\n                if (glsl.buffers && Object.keys(glsl.buffers).length > 0) {\n                    for (var key in glsl.buffers) {\n                        var buffer = glsl.buffers[key];\n                        gl.useProgram(buffer.program);\n                        gl.uniform2f(gl.getUniformLocation(buffer.program, 'u_mouse'), x, y);\n                    }\n                }\n                gl.useProgram(glsl.program);\n                gl.uniform2f(gl.getUniformLocation(glsl.program, 'u_mouse'), x, y);\n            }\n        }\n\n        function updateVariables() {\n            var glsl = this,\n                gl = glsl.gl;\n            var date = new Date();\n            var now = performance.now();\n            glsl.variables = glsl.variables || {};\n            glsl.variables.prev = glsl.variables.prev || now;\n            glsl.variables.delta = (now - glsl.variables.prev) / 1000.0;\n            glsl.variables.prev = now;\n            glsl.variables.load = glsl.timeLoad;\n            glsl.variables.time = (now - glsl.timeLoad) / 1000.0;\n            glsl.variables.year = date.getFullYear();\n            glsl.variables.month = date.getMonth();\n            glsl.variables.date = date.getDate();\n            glsl.variables.daytime = date.getHours() * 3600 + date.getMinutes() * 60 + date.getSeconds() + date.getMilliseconds() * 0.001;\n        }\n\n        function UpdateUniforms(program, key) {\n            var glsl = this,\n                gl = glsl.gl;\n\n            gl.useProgram(program);\n\n            gl.uniform2f(gl.getUniformLocation(program, 'u_resolution'), glsl.canvas.width, glsl.canvas.height);\n\n            if (glsl.nTime > 1) {\n                gl.uniform1f(gl.getUniformLocation(program, 'u_time'), glsl.variables.time);\n            }\n\n            if (glsl.nDelta > 1) {\n                gl.uniform1f(gl.getUniformLocation(program, 'u_delta'), glsl.variables.delta);\n            }\n\n            if (glsl.nDate) {\n                // Set date uniform: year/month/day/time_in_sec\n                gl.uniform4f(gl.getUniformLocation(program, 'u_date'), glsl.variables.year, glsl.variables.month, glsl.variables.date, glsl.variables.daytime);\n            }\n\n            /*\n            glsl.texureIndex = 0;\n            for (var key in glsl.textures) {\n                glsl.uniformTexture(key, {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n            }\n            */\n\n            var i = 0;\n            for (var key in glsl.buffers) {\n                gl.uniform1i(gl.getUniformLocation(program, \"u_buffer_\" + i), glsl.buffers[key].bundle.input.index);\n                i++;\n            }\n\n            /*\n             var i = 0;\n             for (var key in glsl.buffers) {\n                 program.buffers = program.buffers || {};\n                 if (!program.buffers[\"u_buffer_\" + i]) {\n                     program.buffers[\"u_buffer_\" + i] = true;\n                     gl.uniform1i(gl.getUniformLocation(program, \"u_buffer_\" + i), i * 2 + 1);\n                 }\n                 i++;\n             }\n             */\n\n            /*\n            var i = 0,\n                au = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n            while (i < au) {\n                var info = gl.getActiveUniform(program, i);\n                console.log('info', key, info);\n                i++;\n            }\n            console.log('status', key, 'link', gl.getProgramParameter(program, gl.LINK_STATUS), 'validate', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n            */\n\n            // console.log(key, 'u_time', u_time.location);\n\n        }\n\n        function renderGl() {\n            var glsl = this,\n                gl = glsl.gl,\n                W = gl.canvas.width,\n                H = gl.canvas.height;\n            glsl.updateVariables();\n            gl.viewport(0, 0, W, H);\n            if (glsl.buffers && Object.keys(glsl.buffers).length > 0) {\n                for (var key in glsl.buffers) {\n                    var buffer = glsl.buffers[key];\n                    glsl.UpdateUniforms(buffer.program, key);\n                    buffer.bundle.render(W, H, buffer.program);\n                }\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            }\n            glsl.UpdateUniforms(glsl.program, 'main');\n            gl.drawArrays(gl.TRIANGLES, 0, 6);\n        }\n\n        function render() {\n            var glsl = this,\n                gl = glsl.gl;\n            glsl.visible = isCanvasVisible(glsl.canvas);\n            // glsl.animated = true;\n            if (glsl.forceRender || (glsl.animated && glsl.visible && !glsl.paused)) {\n                glsl.renderGl();\n                glsl.change = false;\n                glsl.forceRender = false;\n                glsl.trigger('render', {});\n            }\n        }\n\n        function createShader(glsl, source, type) {\n            var gl = glsl.gl;\n            var shader = gl.createShader(type);\n            gl.shaderSource(shader, source);\n            gl.compileShader(shader);\n            var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n            if (!compiled) {\n                var lastError = gl.getShaderInfoLog(shader);\n                console.error('*** Error compiling shader ' + shader + ':' + lastError);\n                glsl.trigger('error', {\n                    shader: shader,\n                    source: source,\n                    type: type,\n                    error: lastError\n                });\n                gl.deleteShader(shader);\n                return null;\n            }\n            return shader;\n        }\n\n        function createProgram(glsl, shaders, optAttribs, optLocations) {\n            var gl = glsl.gl;\n            var i;\n            var program = gl.createProgram();\n            for (i = 0; i < shaders.length; ++i) {\n                gl.attachShader(program, shaders[i]);\n            }\n            if (optAttribs) {\n                for (i = 0; i < optAttribs.length; ++i) {\n                    gl.bindAttribLocation(program, optLocations ? optLocations[i] : i, optAttribs[i]);\n                }\n            }\n            gl.linkProgram(program);\n            var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n            if (!linked) {\n                var lastError = gl.getProgramInfoLog(program);\n                console.log('Error in program linking:' + lastError);\n                gl.deleteProgram(program);\n                return null;\n            }\n            program.blit = function () {\n                gl.useProgram(program);\n                gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), gl.STATIC_DRAW);\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW);\n                gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n                gl.enableVertexAttribArray(0);\n                return function (destination) {\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, destination);\n                    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n                };\n            }();\n            return program;\n        }\n\n        function isCanvasVisible(canvas) {\n            return ((canvas.getBoundingClientRect().top + canvas.height) > 0) && (canvas.getBoundingClientRect().top < (window.innerHeight || document.documentElement.clientHeight));\n        }\n\n        return GlslCanvasWrapper;\n\n    }();\n\n    var options = window.options = {\n        vertex: '',\n        fragment: '',\n        main: '',\n        buffers: {},\n    };\n\n    function init() {\n        getResource(\"shaders/buffers/milk.glsl\", function (fragment) {\n            // (?<=\\/{2} u_buffer_)(\\d+).*((.|\\n)*?)(?=\\/{2} [u_buffer|main]|\\z)\n            // (?<=\\/{2} main).*((.|\\n)*?)(?=\\/{2} u_buffer|\\z)\n            fragment = fragment.replace(new RegExp('(/{2} u_buffer_)(\\\\d+).*((.|\\\\n)*?)(?=/{2} u_buffer|/{2} main|$)', 'g'), function (match, name, i, fragment) {\n                // console.log('u_buffer_.replace', arguments);\n                options.buffers['u_buffer_' + i] = {\n                    fragment: fragment,\n                };\n                return '';\n            });\n\n            fragment = fragment.replace(new RegExp('(/{2} main).*((.|\\\\n)*)(?=/{2} u_buffer|$)', 'g'), function (match, name, main) {\n                options.main = main;\n                return '';\n            });\n\n            // console.log('getResource', fragment, options.buffers);\n            for (var key in options.buffers) {\n                options.buffers[key].common = fragment;\n            }\n\n            options.fragment = fragment + (options.main || '');\n            // console.log('fragment', options.fragment);\n            createCanvas();\n        });\n    }\n\n    function createCanvas() {\n        var content = document.querySelector('.content');\n        var canvas = document.querySelector('.shader');\n\n        resize(true);\n\n        var glsl = new GlslCanvasWrapper(canvas, {\n            premultipliedAlpha: false,\n            preserveDrawingBuffer: true,\n            backgroundColor: 'rgba(1,1,1,1)',\n        });\n        glsl.animated = true;\n        glsl.on('error', onGlslError);\n        glsl.on('render', function () {\n            // glsl.forceRender = true;\n        });\n\n        load();\n\n        function load() {\n            var options = window.options;\n            document.querySelector('.errors').setAttribute('class', 'errors');\n            document.querySelector('.welcome').setAttribute('class', 'welcome');\n            options.vertex = options.vertex.trim().length > 0 ? options.vertex : null;\n            options.fragment = options.fragment.trim().length > 0 ? options.fragment : null;\n            if (options.fragment || options.vertex) {\n                document.querySelector('body').setAttribute('class', 'ready');\n            } else {\n                document.querySelector('body').setAttribute('class', 'empty');\n            }\n            glsl.load(options.fragment, options.vertex);\n            glsl.loadBuffers(options.buffers);\n            glsl.loadUniforms(options);\n\n            // console.log('glsl', glsl);\n            /*\n            gui.load(options.uniforms);\n            glsl.setUniforms(gui.uniforms());\n            */\n        }\n\n        function resize(init) {\n            var w = content.offsetWidth;\n            var h = content.offsetHeight;\n            canvas.style.width = w + 'px';\n            canvas.style.height = h + 'px';\n            if (init) {\n                canvas.width = w;\n                canvas.height = h;\n            } else {\n                glsl.resize();\n            }\n        }\n\n        var ri;\n\n        function onResize() {\n            if (ri) {\n                clearTimeout(ri);\n            }\n            ri = setTimeout(resize, 50);\n        }\n\n        window.addEventListener('resize', onResize);\n\n        resize();\n    }\n\n    function onGlslError(message) {\n        console.log('onGlslError.error', message.error);\n        var options = window.options;\n        var errors = [],\n            warnings = [];\n        message.error.replace(/ERROR: \\d+:(\\d+): \\'(.+)\\' : (.+)/g, function (m, l, v, t) {\n            var message = 'ERROR (' + v + ') ' + t;\n            var li = '<li><a class=\"error\" unselectable href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([options.uri, Number(l), message])) + '\"><span class=\"line\">ERROR line ' + Number(l) + '</span> <span class=\"value\" title=\"' + v + '\">' + v + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            errors.push(li);\n            return li;\n        });\n        message.error.replace(/WARNING: \\d+:(\\d+): \\'(.*\\n*|.*|\\n*)\\' : (.+)/g, function (m, l, v, t) {\n            var li = '<li><a class=\"warning\" unselectable href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([options.uri, Number(l), message])) + '\"><span class=\"line\">WARN line ' + Number(l) + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            warnings.push(li);\n            return li;\n        });\n        var output = '<div class=\"errors-content\"><p>glslCanvas error</p><ul>';\n        output += errors.join('\\n');\n        output += warnings.join('\\n');\n        output += '</ul></div>';\n        document.querySelector('.errors').setAttribute('class', 'errors active');\n        document.querySelector('.errors').innerHTML = output;\n        document.querySelector('body').setAttribute('class', 'idle');\n    }\n\n    function getResource(url, callback) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.addEventListener('load', function () {\n            callback(request.responseText);\n        });\n        request.send();\n    }\n\n    window.addEventListener('load', init);\n\n}());"]}