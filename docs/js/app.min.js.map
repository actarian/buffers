{"version":3,"sources":["docs/js/app.js"],"names":["GlslCanvas","prototype","TEXTURE_COUNT","BUFFER_COUNT","createBuffer","W","H","program","glsl","this","gl","index","getExtension","texture","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texImage2D","RGBA","FLOAT","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","buffer","createFramebuffer","resize","bindFramebuffer","FRAMEBUFFER","minW","Math","min","minH","pixels","Float32Array","readPixels","newIndex","newTexture","texSubImage2D","newBuffer","deleteTexture","console","log","createSwappableBuffer","input","output","swap","temp","render","name","useProgram","viewport","framebufferTexture2D","COLOR_ATTACHMENT0","drawArrays","TRIANGLES","load","fragString","vertString","vertexString","fragmentString","animated","nDelta","match","length","nTime","nDate","nMouse","search","lines","split","i","ext","pop","toLowerCase","setUniform","main","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","isValid","createProgram","deleteShader","change","trigger","forceRender","loadPrograms","buffers","vertex","key","fragment","common","line","bundle","canvas","width","height","loadUniforms","options","textures","uniformTexture","filtering","repeat","updateVariables","date","Date","now","performance","variables","prev","delta","timeLoad","time","year","getFullYear","month","getMonth","getDate","daytime","getHours","getMinutes","getSeconds","getMilliseconds","UpdateUniforms","uniform2f","getUniformLocation","uniform1f","uniform4f","uniform1i","resizeSwappableBuffers","Object","keys","renderPrograms","visible","getBoundingClientRect","top","window","innerHeight","document","documentElement","clientHeight","paused","setMouse","mouse","rect","x","left","right","y","bottom","_resize","source","type","offset","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","lastError","getShaderInfoLog","error","shaders","optAttribs","optLocations","attachShader","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","flag","apply","CanvasService","onGlslError","message","errors","warnings","replace","m","l","v","t","Number","li","encodeURI","JSON","stringify","uri","push","warning","join","querySelector","setAttribute","innerHTML","addEventListener","url","callback","request","linediff","RegExp","end","substr","content","btnDownload","ri","premultipliedAlpha","preserveDrawingBuffer","backgroundColor","init","w","offsetWidth","h","offsetHeight","style","on","trim","zip","JSZip","Promise","all","map","resolve","XMLHttpRequest","open","onload","file","responseText","send","then","generateAsync","saveAs","clearTimeout","setTimeout","createCanvas"],"mappings":"CAEC,WACG,aAMAA,WAAWC,UAAUC,cAAgB,EACrCF,WAAWC,UAAUE,aAAe,EACpCH,WAAWC,UAAUG,aA4RrB,SAAsBC,EAAGC,EAAGC,GACxB,IAAIC,EAAOC,KACPC,EAAKF,EAAKE,GACVC,EAAQH,EAAKN,cAAgBM,EAAKL,aACtCK,EAAKL,eACmBO,EAAGE,aAAa,qBAAxC,IACIC,EAAUH,EAAGI,gBACjBJ,EAAGK,cAAcL,EAAGM,SAAWL,GAC/BD,EAAGO,YAAYP,EAAGQ,WAAYL,GAC9BH,EAAGS,WAAWT,EAAGQ,WAAY,EAAGR,EAAGU,KAAMf,EAAGC,EAAG,EAAGI,EAAGU,KAAMV,EAAGW,MAAO,MACrEX,EAAGY,cAAcZ,EAAGQ,WAAYR,EAAGa,mBAAoBb,EAAGc,SAC1Dd,EAAGY,cAAcZ,EAAGQ,WAAYR,EAAGe,mBAAoBf,EAAGc,SAC1Dd,EAAGY,cAAcZ,EAAGQ,WAAYR,EAAGgB,eAAgBhB,EAAGiB,eACtDjB,EAAGY,cAAcZ,EAAGQ,WAAYR,EAAGkB,eAAgBlB,EAAGiB,eACtD,IAAIE,EAASnB,EAAGoB,oBAEhB,OACInB,MAAOA,EACPE,QAASA,EACTgB,OAAQA,EACRE,OAKJ,SAAgB1B,EAAGC,GACfI,EAAGsB,gBAAgBtB,EAAGuB,YAAaJ,GACnC,IAAIK,EAAOC,KAAKC,IAAI/B,EAAGI,KAAKJ,GACxBgC,EAAOF,KAAKC,IAAI9B,EAAGG,KAAKH,GACxBgC,EAAS,IAAIC,aAAaL,EAAOG,EAAO,GAC5C3B,EAAG8B,WAAW,EAAG,EAAGN,EAAMG,EAAM3B,EAAGU,KAAMV,EAAGW,MAAOiB,GACnD5B,EAAGsB,gBAAgBtB,EAAGuB,YAAa,MAEnC,IAAIQ,EAAWjC,EAAKN,cAAgBM,EAAKL,aAErCuC,EAAahC,EAAGI,gBACpBJ,EAAGK,cAAcL,EAAGM,SAAWyB,GAC/B/B,EAAGO,YAAYP,EAAGQ,WAAYwB,GAC9BhC,EAAGS,WAAWT,EAAGQ,WAAY,EAAGR,EAAGU,KAAMf,EAAGC,EAAG,EAAGI,EAAGU,KAAMV,EAAGW,MAAO,MACrEX,EAAGY,cAAcZ,EAAGQ,WAAYR,EAAGa,mBAAoBb,EAAGc,SAC1Dd,EAAGY,cAAcZ,EAAGQ,WAAYR,EAAGe,mBAAoBf,EAAGc,SAC1Dd,EAAGY,cAAcZ,EAAGQ,WAAYR,EAAGgB,eAAgBhB,EAAGiB,eACtDjB,EAAGY,cAAcZ,EAAGQ,WAAYR,EAAGkB,eAAgBlB,EAAGiB,eAEtDjB,EAAGiC,cAAcjC,EAAGQ,WAAY,EAAG,EAAG,EAAGgB,EAAMG,EAAM3B,EAAGU,KAAMV,EAAGW,MAAOiB,GAExE,IAAIM,EAAYlC,EAAGoB,oBAEnBpB,EAAGsB,gBAAgBtB,EAAGuB,YAAa,MACnCvB,EAAGmC,cAAchC,GAEjBH,EAAGK,cAAcL,EAAGM,SAAWL,GAC/BD,EAAGO,YAAYP,EAAGQ,WAAYwB,GAC9B/B,EAAQF,KAAKE,MAAQA,EACrBE,EAAUJ,KAAKI,QAAU6B,EACzBb,EAASpB,KAAKoB,OAASe,EACvBnC,KAAKJ,EAAIA,EACTI,KAAKH,EAAIA,EACTwC,QAAQC,IAAIpC,EAAON,EAAGC,IArCtBD,EAAGA,EACHC,EAAGA,IAjTXN,WAAWC,UAAU+C,sBAyVrB,SAA+B3C,EAAGC,EAAGC,GACjC,IACIG,EADOD,KACGC,GACVuC,EAFOxC,KAEML,aAAaC,EAAGC,EAAGC,GAChC2C,EAHOzC,KAGOL,aAAaC,EAAGC,EAAGC,GACrC,OACI0C,MAAOA,EACPC,OAAQA,EACRC,KAAM,WACF,IAAIC,EAAOH,EACXA,EAAQC,EACRA,EAASE,EACT3C,KAAKwC,MAAQA,EACbxC,KAAKyC,OAASA,GAElBG,OAAQ,SAAUhD,EAAGC,EAAGC,EAAS+C,GAC7B5C,EAAG6C,WAAWhD,GAEdG,EAAG8C,SAAS,EAAG,EAAGnD,EAAGC,GACrBI,EAAGsB,gBAAgBtB,EAAGuB,YAAagB,EAAMpB,QACzCnB,EAAG+C,qBAAqB/C,EAAGuB,YAAavB,EAAGgD,kBAAmBhD,EAAGQ,WAAYgC,EAAOrC,QAAS,GAC7FH,EAAGiD,WAAWjD,EAAGkD,UAAW,EAAG,GAC/BnD,KAAK0C,QAETpB,OAAQ,SAAU1B,EAAGC,EAAGC,EAAS+C,GAC7B5C,EAAG6C,WAAWhD,GACdG,EAAG8C,SAAS,EAAG,EAAGnD,EAAGC,GACrBG,KAAKwC,MAAMlB,OAAO1B,EAAGC,GACrBG,KAAKyC,OAAOnB,OAAO1B,EAAGC,MApXlCN,WAAWC,UAAU4D,KAerB,SAAcC,EAAYC,GACtB,IAAIvD,EAAOC,KACPC,EAAKF,EAAKE,GAEVqD,IACAvD,EAAKwD,aAAeD,GAGpBD,IACAtD,EAAKyD,eAAiBH,GAS1B,GAPAtD,EAAK0D,UAAW,EAChB1D,EAAK2D,QAAU3D,EAAKyD,eAAeG,MAAM,iBAAmBC,OAC5D7D,EAAK8D,OAAS9D,EAAKyD,eAAeG,MAAM,gBAAkBC,OAC1D7D,EAAK+D,OAAS/D,EAAKyD,eAAeG,MAAM,gBAAkBC,OAC1D7D,EAAKgE,QAAUhE,EAAKyD,eAAeG,MAAM,iBAAmBC,OAC5D7D,EAAK0D,SAAwB,EAAb1D,EAAK+D,OAA0B,EAAb/D,EAAK8D,OAA2B,EAAd9D,EAAKgE,OACzChE,EAAKyD,eAAeQ,OAAO,cAGvC,IADA,IAAIC,EAAQlE,EAAKyD,eAAeU,MAAM,MAC7BC,EAAI,EAAGA,EAAIF,EAAML,OAAQO,IAAK,CACnC,IAAIR,EAAQM,EAAME,GAAGR,MAAM,oEAC3B,GAAIA,EAAO,CACP,IAAIS,EAAMT,EAAM,GAAGO,MAAM,KAAKG,MAAMC,cAChCX,EAAM,IAAMA,EAAM,KAAe,QAARS,GAAyB,SAARA,GAA0B,QAARA,GAAyB,QAARA,GAAyB,SAARA,GAA0B,QAARA,IAChHrE,EAAKwE,WAAWZ,EAAM,GAAIA,EAAM,IAGxC,IAAIa,EAAOP,EAAME,GAAGR,MAAM,sBAC1B,GAAIa,EACA,MAIZ,IAAIC,EAAeC,EAAa3E,EAAMA,EAAKwD,aAActD,EAAG0E,eACxDC,EAAiBF,EAAa3E,EAAMA,EAAKyD,eAAgBvD,EAAG4E,iBAE3DD,EAID7E,EAAK+E,SAAU,GAHfF,EAAiBF,EAAa3E,EAAM,+CAAgDE,EAAG4E,iBACvF9E,EAAK+E,SAAU,GAKnB,IAAIhF,EAAUiF,EAAchF,GAAO0E,EAAcG,IACjD3E,EAAG6C,WAAWhD,GAIdG,EAAG+E,aAAaP,GAChBxE,EAAG+E,aAAaJ,GAChB7E,EAAKD,QAAUA,EACfC,EAAKkF,QAAS,EAEdlF,EAAKmF,QAAQ,WACbnF,EAAKoF,aAAc,GArEvB5F,WAAWC,UAAU4F,aAwErB,SAAsBC,GAClB,IAAItF,EAAOC,KACPC,EAAKF,EAAKE,GACVkE,EAAI,EACRpE,EAAKsF,WACL,IAAIC,EAASZ,EAAa3E,EAAMA,EAAKwD,aAActD,EAAG0E,eACtD,IAAK,IAAIY,KAAOF,EAAS,CACrB,IAAIjE,EAASiE,EAAQE,GACjBC,EAAWd,EAAa3E,EAAMqB,EAAOqE,OAASrE,EAAOoE,SAAUvF,EAAG4E,gBAAiBzD,EAAOsE,MACzFF,EAIDzF,EAAK+E,SAAU,GAHfU,EAAWd,EAAa3E,EAAM,+CAAgDE,EAAG4E,iBACjF9E,EAAK+E,SAAU,GAInB,IAAIhF,EAAUiF,EAAchF,GAAOuF,EAAQE,IAC3CpE,EAAOyB,KAAO,YAAcsB,EAC5B/C,EAAOtB,QAAUA,EACjBsB,EAAOuE,OAAS5F,EAAKwC,sBAAsBxC,EAAK6F,OAAOC,MAAO9F,EAAK6F,OAAOE,OAAQhG,GAElFC,EAAKsF,QAAQE,GAAOnE,EACpBnB,EAAG+E,aAAaQ,GAChBrB,IAEJlE,EAAG+E,aAAaM,IA/FpB/F,WAAWC,UAAUuG,aAkGrB,SAAsBC,GACPhG,KACGC,GACd,GAAI+F,EAAQC,SACR,IAAK,IAAIV,KAAOS,EAAQC,SAHjBjG,KAIEkG,eAAe,aAAeX,EAAKS,EAAQC,SAASV,IACrDY,UAAW,SACXC,QAAQ,KAxGxB7G,WAAWC,UAAU6G,gBAuMrB,WACI,IAAItG,EAAOC,KAEPsG,GADKvG,EAAKE,GACH,IAAIsG,MACXC,EAAMC,YAAYD,MACtBzG,EAAK2G,UAAY3G,EAAK2G,cACtB3G,EAAK2G,UAAUC,KAAO5G,EAAK2G,UAAUC,MAAQH,EAC7CzG,EAAK2G,UAAUE,OAASJ,EAAMzG,EAAK2G,UAAUC,MAAQ,IACrD5G,EAAK2G,UAAUC,KAAOH,EACtBzG,EAAK2G,UAAUtD,KAAOrD,EAAK8G,SAC3B9G,EAAK2G,UAAUI,MAAQN,EAAMzG,EAAK8G,UAAY,IAC9C9G,EAAK2G,UAAUK,KAAOT,EAAKU,cAC3BjH,EAAK2G,UAAUO,MAAQX,EAAKY,WAC5BnH,EAAK2G,UAAUJ,KAAOA,EAAKa,UAC3BpH,EAAK2G,UAAUU,QAA4B,KAAlBd,EAAKe,WAAwC,GAApBf,EAAKgB,aAAoBhB,EAAKiB,aAAwC,KAAzBjB,EAAKkB,mBApNxGjI,WAAWC,UAAUiI,eAuNrB,SAAwB3H,EAASyF,GAC7B,IAAIxF,EAAOC,KACPC,EAAKF,EAAKE,GAEdA,EAAG6C,WAAWhD,GAEdG,EAAGyH,UAAUzH,EAAG0H,mBAAmB7H,EAAS,gBAAiBC,EAAK6F,OAAOC,MAAO9F,EAAK6F,OAAOE,QAE3E,EAAb/F,EAAK8D,OACL5D,EAAG2H,UAAU3H,EAAG0H,mBAAmB7H,EAAS,UAAWC,EAAK2G,UAAUI,MAGxD,EAAd/G,EAAK2D,QACLzD,EAAG2H,UAAU3H,EAAG0H,mBAAmB7H,EAAS,WAAYC,EAAK2G,UAAUE,OAGvE7G,EAAK+D,OAEL7D,EAAG4H,UAAU5H,EAAG0H,mBAAmB7H,EAAS,UAAWC,EAAK2G,UAAUK,KAAMhH,EAAK2G,UAAUO,MAAOlH,EAAK2G,UAAUJ,KAAMvG,EAAK2G,UAAUU,SAa1I,IAAK,IAAI7B,KAAOxF,EAAKsF,QAAS,CAC1B,IAAIjE,EAASrB,EAAKsF,QAAQE,GAC1BtF,EAAG6H,UAAU7H,EAAG0H,mBAAmB7H,EAASsB,EAAOyB,MAAOzB,EAAOuE,OAAOnD,MAAMtC,SAvPtFX,WAAWC,UAAUuI,uBAoJrB,WACI,IAAIhI,EAAOC,KACPC,EAAKF,EAAKE,GACd,GAAIF,EAAKsF,SAA8C,EAAnC2C,OAAOC,KAAKlI,EAAKsF,SAASzB,OAAY,CACtD,IACIhE,EAAIK,EAAG2F,OAAOC,MACdhG,EAAII,EAAG2F,OAAOE,OAElB,IAAK,IAAIP,KADTtF,EAAG8C,SAAS,EAAG,EAAGnD,EAAGC,GACLE,EAAKsF,QAAS,CAC1B,IAAIjE,EAASrB,EAAKsF,QAAQE,GAC1BnE,EAAOuE,OAAOrE,OAAO1B,EAAGC,EAAGuB,EAAOtB,QAASsB,EAAOyB,MAYlDsB,EAEJlE,EAAG6C,WAAW/C,EAAKD,WA3K3BP,WAAWC,UAAU0I,eAuHrB,WACI,IAAInI,EAAOC,KACPC,EAAKF,EAAKE,GACVL,EAAIK,EAAG2F,OAAOC,MACdhG,EAAII,EAAG2F,OAAOE,OAGlB,GAFA/F,EAAKsG,kBACLpG,EAAG8C,SAAS,EAAG,EAAGnD,EAAGC,GACjBE,EAAKsF,SAA8C,EAAnC2C,OAAOC,KAAKlI,EAAKsF,SAASzB,OAAY,CACtD,IAAK,IAAI2B,KAAOxF,EAAKsF,QAAS,CAC1B,IAAIjE,EAASrB,EAAKsF,QAAQE,GAC1BxF,EAAK0H,eAAerG,EAAOtB,QAASyF,GACpCnE,EAAOuE,OAAO/C,OAAOhD,EAAGC,EAAGuB,EAAOtB,QAASsB,EAAOyB,MAEtD5C,EAAGsB,gBAAgBtB,EAAGuB,YAAa,MAEvCzB,EAAK0H,eAAe1H,EAAKD,QAAS,QAClCG,EAAGiD,WAAWjD,EAAGkD,UAAW,EAAG,IAtInC5D,WAAWC,UAAUoD,OA0GrB,WACI,IAAI7C,EAAOC,KACFD,EAAKE,GACdF,EAAKoI,SA8UgBvC,EA9UU7F,EAAK6F,OA+U2B,EAAtDA,EAAOwC,wBAAwBC,IAAMzC,EAAOE,QAAiBF,EAAOwC,wBAAwBC,KAAOC,OAAOC,aAAeC,SAASC,gBAAgBC,gBA9UvJ3I,EAAKoF,aAAgBpF,EAAK0D,UAAY1D,EAAKoI,UAAYpI,EAAK4I,UAC5D5I,EAAKmI,iBACLnI,EAAKkF,QAAS,EACdlF,EAAKoF,aAAc,EACnBpF,EAAKmF,QAAQ,cAyUrB,IAAyBU,GAzbTrG,WAAWC,UAAUoJ,SACrCrJ,WAAWC,UAAUoJ,SA2KrB,SAAkBC,GAEd,IAAI9I,EAAOC,KACPC,EAAKF,EAAKE,GACV6I,EAAO9I,KAAK4F,OAAOwC,wBACvB,GAAIS,GAASA,EAAME,GAAKF,EAAME,GAAKD,EAAKE,MAAQH,EAAME,GAAKD,EAAKG,OAASJ,EAAMK,GAAKL,EAAMK,GAAKJ,EAAKT,KAAOQ,EAAMK,GAAKJ,EAAKK,OAAQ,CAC/H,IAAIJ,EAAIF,EAAME,EAAID,EAAKE,KACnBE,EAAIlJ,KAAK4F,OAAOE,QAAU+C,EAAMK,EAAIJ,EAAKT,KAE7C,GAAItI,EAAKsF,SAA8C,EAAnC2C,OAAOC,KAAKlI,EAAKsF,SAASzB,OAC1C,IAAK,IAAI2B,KAAOxF,EAAKsF,QAAS,CAC1B,IAAIjE,EAASrB,EAAKsF,QAAQE,GAC1BtF,EAAG6C,WAAW1B,EAAOtB,SACrBG,EAAGyH,UAAUzH,EAAG0H,mBAAmBvG,EAAOtB,QAAS,WAAYiJ,EAAGG,GAG1EjJ,EAAG6C,WAAW/C,EAAKD,SACnBG,EAAGyH,UAAUzH,EAAG0H,mBAAmB5H,EAAKD,QAAS,WAAYiJ,EAAGG,KA1LxE,IAAIE,EAAU7J,WAAWC,UAAU8B,OA6WnC,SAASoD,EAAa3E,EAAMsJ,EAAQC,EAAMC,GACtC,IAAItJ,EAAKF,EAAKE,GACVuJ,EAASvJ,EAAGyE,aAAa4E,GAI7B,GAHArJ,EAAGwJ,aAAaD,EAAQH,GACxBpJ,EAAGyJ,cAAcF,IACFvJ,EAAG0J,mBAAmBH,EAAQvJ,EAAG2J,gBACjC,CACX,IAAIC,EAAY5J,EAAG6J,iBAAiBN,GAWpC,OAVAnH,QAAQC,IAAIuH,GACZxH,QAAQ0H,MAAM,8BAAgCP,EAAS,IAAMK,GAC7D9J,EAAKmF,QAAQ,SACTsE,OAAQA,EACRH,OAAQA,EACRC,KAAMA,EACNS,MAAOF,EACPN,OAAQA,GAAU,IAEtBtJ,EAAG+E,aAAawE,GACT,KAEX,OAAOA,EAGX,SAASzE,EAAchF,EAAMiK,EAASC,EAAYC,GAC9C,IACI/F,EADAlE,EAAKF,EAAKE,GAEVH,EAAUG,EAAG8E,gBACjB,IAAKZ,EAAI,EAAGA,EAAI6F,EAAQpG,SAAUO,EAC9BlE,EAAGkK,aAAarK,EAASkK,EAAQ7F,IAErC,GAAI8F,EACA,IAAK9F,EAAI,EAAGA,EAAI8F,EAAWrG,SAAUO,EACjClE,EAAGmK,mBAAmBtK,EAASoK,EAAeA,EAAa/F,GAAKA,EAAG8F,EAAW9F,IAKtF,GAFAlE,EAAGoK,YAAYvK,IACFG,EAAGqK,oBAAoBxK,EAASG,EAAGsK,aACnC,CACT,IAAIV,EAAY5J,EAAGuK,kBAAkB1K,GAGrC,OAFAuC,QAAQC,IAAI,4BAA8BuH,GAC1C5J,EAAGwK,cAAc3K,GACV,KA6BX,OAAOA,EAlbXP,WAAWC,UAAU8B,OAmIrB,WACI,IACIoJ,EAAOtB,EAAQuB,MADR3K,MAEP0K,GAFO1K,KAGF+H,yBAET,OAAO2C,GAseXpC,OAAOsC,cApoBP,SAAuBhF,EAAQI,GAC3B,OAAO,IAAIzG,WAAWqG,EAAQI,IAJtC,GA2oBC,WACG,aAEA,IAAIA,EAAUsC,OAAOtC,SACjBV,OAAQ,GACRE,SAAU,GACVhB,KAAM,GACNa,YA8JJ,SAASwF,EAAYC,GACjBzI,QAAQC,IAAI,oBAAqBwI,GACjC,IAAI9E,EAAUsC,OAAOtC,QACjB+E,KACAC,KACJF,EAAQf,MAAMkB,QAAQ,qCAAsC,SAAUC,EAAGC,EAAGC,EAAGC,GAC3E,IAAI3F,EAAO4F,OAAOH,GAAKL,EAAQvB,OAC3BQ,EAAQ,UAAYqB,EAAI,KAAOC,EAC/BE,EAAK,2CAA6CC,UAAU,sCAAwCC,KAAKC,WAAW1F,EAAQ2F,IAAKjG,EAAMqE,KAAW,mCAAqCrE,EAAO,sCAAwC0F,EAAI,KAAOA,EAAI,qCAAuCC,EAAI,KAAOA,EAAI,mBAE/S,OADAN,EAAOa,KAAKL,GACLA,IAEXT,EAAQf,MAAMkB,QAAQ,iDAAkD,SAAUC,EAAGC,EAAGC,EAAGC,GACvF,IAAI3F,EAAO4F,OAAOH,GAAKL,EAAQvB,OAC3BsC,EAAU,YAAcT,EAAI,KAAOC,EACnCE,EAAK,6CAA+CC,UAAU,sCAAwCC,KAAKC,WAAW1F,EAAQ2F,IAAKjG,EAAMmG,KAAa,kCAAoCnG,EAAO,qCAAuC2F,EAAI,KAAOA,EAAI,mBAE3P,OADAL,EAASY,KAAKL,GACPA,IAEX,IAAI9I,EAAS,0DACbA,GAAUsI,EAAOe,KAAK,MACtBrJ,GAAUuI,EAASc,KAAK,MACxBrJ,GAAU,cACV+F,SAASuD,cAAc,WAAWC,aAAa,QAAS,iBACxDxD,SAASuD,cAAc,WAAWE,UAAYxJ,EAC9C+F,SAASuD,cAAc,QAAQC,aAAa,QAAS,QAYzD1D,OAAO4D,iBAAiB,OAhMxB,WAuLA,IAAqBC,EAAKC,EAClBC,EADaF,EAtLL,4BAsLUC,EAtLmB,SAAU5G,GAC/C,IAAI6D,EAAS7D,EAEbQ,EAAQxB,KAAO,KAmBf,IAAI8H,GALJ9G,GAXAA,EAAWA,EAASyF,QAAQ,IAAIsB,OAAO,yEAA0E,KAAM,SAAU5I,EAAOd,EAAMsB,EAAGqB,EAAUgH,EAAKjD,GAQ5J,OANAA,EAASF,EAAOoD,OAAO,EAAGlD,GAAQrF,MAAM,MAAMN,OAE9CoC,EAAQX,QAAQ,YAAclB,IAC1BqB,SAAUA,EACV+D,OAAQA,GAEL,MAGS0B,QAAQ,IAAIsB,OAAO,mDAAoD,KAAM,SAAU5I,EAAOd,EAAM2B,EAAMgI,EAAKjD,GAE/H,OADAvD,EAAQxB,KAAOA,EACR,MAGaN,MAAM,MAAMN,OAYpC,IAAK,IAAI2B,KATLS,EAAQxB,MACR6E,EAAO4B,QAAQ,IAAIsB,OAAO,mDAAoD,KAAM,SAAU5I,EAAOd,EAAM2B,EAAMgI,EAAKjD,GAGlH,OADAA,EAASF,EAAOoD,OAAO,EAAGlD,GAAQrF,MAAM,MAAMN,OAAS0I,EAChD,KAKCtG,EAAQX,QACpBW,EAAQX,QAAQE,GAAKE,OAASD,EAC9BQ,EAAQX,QAAQE,GAAKgE,QAAU+C,EAGnCtG,EAAQR,SAAWA,GAAYQ,EAAQxB,MAAQ,IAC/CwB,EAAQuD,OAhBC,EAsBjB,WACI,IAAImD,EAAUlE,SAASuD,cAAc,YACjCnG,EAAS4C,SAASuD,cAAc,WAChCY,EAAcnE,SAASuD,cAAc,iBAEzCzK,GAAO,GAEP,IA8CIsL,EAjCI5G,EAbJjG,EAAO,IAAI6K,cAAchF,GACzBiH,oBAAoB,EACpBC,uBAAuB,EACvBC,gBAAiB,kBA8BrB,SAASzL,EAAO0L,GACZ,IAAIC,EAAIP,EAAQQ,YACZC,EAAIT,EAAQU,aAChBxH,EAAOyH,MAAMxH,MAAQoH,EAAI,KACzBrH,EAAOyH,MAAMvH,OAASqH,EAAI,KACtBH,GACApH,EAAOC,MAAQoH,EACfrH,EAAOE,OAASqH,GAEhBpN,EAAKuB,SArCbvB,EAAKuN,GAAG,QAASzC,GACjB9K,EAAKuN,GAAG,SAAU,cAOVtH,EAAUsC,OAAOtC,QACrBwC,SAASuD,cAAc,WAAWC,aAAa,QAAS,UACxDxD,SAASuD,cAAc,YAAYC,aAAa,QAAS,WACzDhG,EAAQV,OAAwC,EAA/BU,EAAQV,OAAOiI,OAAO3J,OAAaoC,EAAQV,OAAS,KACrEU,EAAQR,SAA4C,EAAjCQ,EAAQR,SAAS+H,OAAO3J,OAAaoC,EAAQR,SAAW,KACvEQ,EAAQR,UAAYQ,EAAQV,OAC5BkD,SAASuD,cAAc,QAAQC,aAAa,QAAS,SAErDxD,SAASuD,cAAc,QAAQC,aAAa,QAAS,SAEzDjM,EAAKqD,KAAK4C,EAAQR,SAAUQ,EAAQV,OAAQU,EAAQuD,QACpDxJ,EAAKqF,aAAaY,EAAQX,SAC1BtF,EAAKgG,aAAaC,GAsEtB2G,EAAYT,iBAAiB,QAxC7B,WACI,IAYIsB,EAAM,IAAIC,MACdC,QAAQC,KAZJ,cACA,kBACA,kBACA,sBACA,YACA,gBACA,gBACA,oBACA,4BACA,cAGaC,IAAI,SAAUzB,GAC3B,OAAO,IAAIuB,QAAQ,SAAUG,GACzB,IAAIxB,EAAU,IAAIyB,eAClBzB,EAAQ0B,KAAK,MAAO5B,GACpBE,EAAQ2B,OAAS,WACbR,EAAIS,KAAK9B,EAAKnM,KAAKkO,cACnBL,KAEJxB,EAAQ8B,YAEZC,KAAK,WACL/L,QAAQC,IAAIkL,GACZA,EAAIa,eACA/E,KAAM,SACP8E,KAAK,SAAU1B,GAOd4B,OAAO5B,EAAS,yBAM5BpE,OAAO4D,iBAAiB,SAhDxB,WACQU,GACA2B,aAAa3B,GAEjBA,EAAK4B,WAAWlN,EAAQ,MA8C5BA,IA7GImN,KA6IApC,EAAU,IAAIyB,gBACVC,KAAK,MAAO5B,GAAK,GACzBE,EAAQH,iBAAiB,OAAQ,WAC7BE,EAASC,EAAQ6B,gBAErB7B,EAAQ8B,SAvMhB","file":"app.min.js","sourcesContent":["/* global window, document, console, GlslCanvas */\n\n(function () {\n    'use strict';\n\n    function CanvasService(canvas, options) {\n        return new GlslCanvas(canvas, options);\n    }\n\n    GlslCanvas.prototype.TEXTURE_COUNT = 0;\n    GlslCanvas.prototype.BUFFER_COUNT = 0;\n    GlslCanvas.prototype.createBuffer = createBuffer;\n    GlslCanvas.prototype.createSwappableBuffer = createSwappableBuffer;\n    GlslCanvas.prototype.load = load;\n    GlslCanvas.prototype.loadPrograms = loadPrograms;\n    GlslCanvas.prototype.loadUniforms = loadUniforms;\n    GlslCanvas.prototype.updateVariables = updateVariables;\n    GlslCanvas.prototype.UpdateUniforms = UpdateUniforms;\n    GlslCanvas.prototype.resizeSwappableBuffers = resizeSwappableBuffers;\n    GlslCanvas.prototype.renderPrograms = renderPrograms;\n    GlslCanvas.prototype.render = render;\n\n    var _setMouse = GlslCanvas.prototype.setMouse;\n    GlslCanvas.prototype.setMouse = setMouse;\n\n    var _resize = GlslCanvas.prototype.resize;\n    GlslCanvas.prototype.resize = resize;\n\n    function load(fragString, vertString) {\n        var glsl = this,\n            gl = glsl.gl;\n        // Load vertex shader if there is one\n        if (vertString) {\n            glsl.vertexString = vertString;\n        }\n        // Load fragment shader if there is one\n        if (fragString) {\n            glsl.fragmentString = fragString;\n        }\n        glsl.animated = false;\n        glsl.nDelta = (glsl.fragmentString.match(/u_delta/g) || []).length;\n        glsl.nTime = (glsl.fragmentString.match(/u_time/g) || []).length;\n        glsl.nDate = (glsl.fragmentString.match(/u_date/g) || []).length;\n        glsl.nMouse = (glsl.fragmentString.match(/u_mouse/g) || []).length;\n        glsl.animated = glsl.nDate > 1 || glsl.nTime > 1 || glsl.nMouse > 1;\n        var nTextures = glsl.fragmentString.search(/sampler2D/g);\n        if (nTextures) {\n            var lines = glsl.fragmentString.split('\\n');\n            for (var i = 0; i < lines.length; i++) {\n                var match = lines[i].match(/uniform\\s*sampler2D\\s*([\\w]*);\\s*\\/\\/\\s*([\\w|\\:\\/\\/|\\.|\\-|\\_]*)/i);\n                if (match) {\n                    var ext = match[2].split('.').pop().toLowerCase();\n                    if (match[1] && match[2] && (ext === 'jpg' || ext === 'jpeg' || ext === 'png' || ext === 'ogv' || ext === 'webm' || ext === 'mp4')) {\n                        glsl.setUniform(match[1], match[2]);\n                    }\n                }\n                var main = lines[i].match(/\\s*void\\s*main\\s*/g);\n                if (main) {\n                    break;\n                }\n            }\n        }\n        var vertexShader = createShader(glsl, glsl.vertexString, gl.VERTEX_SHADER);\n        var fragmentShader = createShader(glsl, glsl.fragmentString, gl.FRAGMENT_SHADER);\n        // If Fragment shader fails load a empty one to sign the error\n        if (!fragmentShader) {\n            fragmentShader = createShader(glsl, 'void main(){\\n\\tgl_FragColor = vec4(1.0);\\n}', gl.FRAGMENT_SHADER);\n            glsl.isValid = false;\n        } else {\n            glsl.isValid = true;\n        }\n        // Create and use program\n        var program = createProgram(glsl, [vertexShader, fragmentShader]); //, [0,1],['a_texcoord','a_position']);\n        gl.useProgram(program);\n        // Delete shaders\n        // gl.detachShader(program, vertexShader);\n        // gl.detachShader(program, fragmentShader);\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n        glsl.program = program;\n        glsl.change = true;\n        // Trigger event\n        glsl.trigger('load', {});\n        glsl.forceRender = true;\n    }\n\n    function loadPrograms(buffers) {\n        var glsl = this,\n            gl = glsl.gl,\n            i = 0;\n        glsl.buffers = {};\n        var vertex = createShader(glsl, glsl.vertexString, gl.VERTEX_SHADER);\n        for (var key in buffers) {\n            var buffer = buffers[key];\n            var fragment = createShader(glsl, buffer.common + buffer.fragment, gl.FRAGMENT_SHADER, buffer.line);\n            if (!fragment) {\n                fragment = createShader(glsl, 'void main(){\\n\\tgl_FragColor = vec4(1.0);\\n}', gl.FRAGMENT_SHADER);\n                glsl.isValid = false;\n            } else {\n                glsl.isValid = true;\n            }\n            var program = createProgram(glsl, [vertex, fragment]);\n            buffer.name = 'u_buffer_' + i;\n            buffer.program = program;\n            buffer.bundle = glsl.createSwappableBuffer(glsl.canvas.width, glsl.canvas.height, program);\n            // console.log(i, key, buffer.common + buffer.fragment, buffer.bundle);\n            glsl.buffers[key] = buffer;\n            gl.deleteShader(fragment);\n            i++;\n        }\n        gl.deleteShader(vertex);\n    }\n\n    function loadUniforms(options) {\n        var glsl = this,\n            gl = glsl.gl;\n        if (options.textures) {\n            for (var key in options.textures) {\n                glsl.uniformTexture('u_texture_' + key, options.textures[key], {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n            }\n        }\n    }\n\n    function render() {\n        var glsl = this,\n            gl = glsl.gl;\n        glsl.visible = isCanvasVisible(glsl.canvas);\n        if (glsl.forceRender || (glsl.animated && glsl.visible && !glsl.paused)) {\n            glsl.renderPrograms();\n            glsl.change = false;\n            glsl.forceRender = false;\n            glsl.trigger('render', {});\n        }\n    }\n\n    function renderPrograms() {\n        var glsl = this,\n            gl = glsl.gl,\n            W = gl.canvas.width,\n            H = gl.canvas.height;\n        glsl.updateVariables();\n        gl.viewport(0, 0, W, H);\n        if (glsl.buffers && Object.keys(glsl.buffers).length > 0) {\n            for (var key in glsl.buffers) {\n                var buffer = glsl.buffers[key];\n                glsl.UpdateUniforms(buffer.program, key);\n                buffer.bundle.render(W, H, buffer.program, buffer.name);\n            }\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        }\n        glsl.UpdateUniforms(glsl.program, 'main');\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n\n    function resize() {\n        var glsl = this;\n        var flag = _resize.apply(glsl);\n        if (flag) {\n            glsl.resizeSwappableBuffers();\n        }\n        return flag;\n    }\n\n    function resizeSwappableBuffers() {\n        var glsl = this,\n            gl = glsl.gl;\n        if (glsl.buffers && Object.keys(glsl.buffers).length > 0) {\n            var i = 0,\n                W = gl.canvas.width,\n                H = gl.canvas.height;\n            gl.viewport(0, 0, W, H);\n            for (var key in glsl.buffers) {\n                var buffer = glsl.buffers[key];\n                buffer.bundle.resize(W, H, buffer.program, buffer.name);\n                /*\n                gl.useProgram(buffer.program);\n                //\n                gl.activeTexture(gl.TEXTURE0 + i * 2);\n                gl.bindTexture(gl.TEXTURE_2D, buffer.bundle.textureOut);\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                //\n                gl.activeTexture(gl.TEXTURE0 + i * 2 + 1);\n                gl.bindTexture(gl.TEXTURE_2D, buffer.bundle.textureIn);\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                */\n                i++;\n            }\n            gl.useProgram(glsl.program);\n        }\n    }\n\n    function setMouse(mouse) {\n        // _setMouse(mouse);\n        var glsl = this,\n            gl = glsl.gl;\n        var rect = this.canvas.getBoundingClientRect();\n        if (mouse && mouse.x && mouse.x >= rect.left && mouse.x <= rect.right && mouse.y && mouse.y >= rect.top && mouse.y <= rect.bottom) {\n            var x = mouse.x - rect.left;\n            var y = this.canvas.height - (mouse.y - rect.top);\n            // this.uniform('2f', 'vec2', 'u_mouse', x, y);\n            if (glsl.buffers && Object.keys(glsl.buffers).length > 0) {\n                for (var key in glsl.buffers) {\n                    var buffer = glsl.buffers[key];\n                    gl.useProgram(buffer.program);\n                    gl.uniform2f(gl.getUniformLocation(buffer.program, 'u_mouse'), x, y);\n                }\n            }\n            gl.useProgram(glsl.program);\n            gl.uniform2f(gl.getUniformLocation(glsl.program, 'u_mouse'), x, y);\n        }\n    }\n\n    function updateVariables() {\n        var glsl = this,\n            gl = glsl.gl;\n        var date = new Date();\n        var now = performance.now();\n        glsl.variables = glsl.variables || {};\n        glsl.variables.prev = glsl.variables.prev || now;\n        glsl.variables.delta = (now - glsl.variables.prev) / 1000.0;\n        glsl.variables.prev = now;\n        glsl.variables.load = glsl.timeLoad;\n        glsl.variables.time = (now - glsl.timeLoad) / 1000.0;\n        glsl.variables.year = date.getFullYear();\n        glsl.variables.month = date.getMonth();\n        glsl.variables.date = date.getDate();\n        glsl.variables.daytime = date.getHours() * 3600 + date.getMinutes() * 60 + date.getSeconds() + date.getMilliseconds() * 0.001;\n    }\n\n    function UpdateUniforms(program, key) {\n        var glsl = this,\n            gl = glsl.gl;\n\n        gl.useProgram(program);\n\n        gl.uniform2f(gl.getUniformLocation(program, 'u_resolution'), glsl.canvas.width, glsl.canvas.height);\n\n        if (glsl.nTime > 1) {\n            gl.uniform1f(gl.getUniformLocation(program, 'u_time'), glsl.variables.time);\n        }\n\n        if (glsl.nDelta > 1) {\n            gl.uniform1f(gl.getUniformLocation(program, 'u_delta'), glsl.variables.delta);\n        }\n\n        if (glsl.nDate) {\n            // Set date uniform: year/month/day/time_in_sec\n            gl.uniform4f(gl.getUniformLocation(program, 'u_date'), glsl.variables.year, glsl.variables.month, glsl.variables.date, glsl.variables.daytime);\n        }\n\n        /*\n        glsl.texureIndex = 0;\n        for (var key in glsl.textures) {\n            glsl.uniformTexture(key, {\n                filtering: 'mipmap',\n                repeat: true,\n            });\n        }\n        */\n\n        for (var key in glsl.buffers) {\n            var buffer = glsl.buffers[key];\n            gl.uniform1i(gl.getUniformLocation(program, buffer.name), buffer.bundle.input.index);\n        }\n\n        /*\n        var i = 0;\n        for (var key in glsl.buffers) {\n            program.buffers = program.buffers || {};\n            if (!program.buffers[\"u_buffer_\" + i]) {\n                program.buffers[\"u_buffer_\" + i] = true;\n                gl.uniform1i(gl.getUniformLocation(program, \"u_buffer_\" + i), i * 2 + 1);\n            }\n            i++;\n        }\n        */\n\n        /*\n        var i = 0,\n            au = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n        while (i < au) {\n            var info = gl.getActiveUniform(program, i);\n            console.log('info', key, info);\n            i++;\n        }\n        console.log('status', key, 'link', gl.getProgramParameter(program, gl.LINK_STATUS), 'validate', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n        */\n\n        // console.log(key, 'u_time', u_time.location);\n\n    }\n\n    function createBuffer(W, H, program) {\n        var glsl = this,\n            gl = glsl.gl,\n            index = glsl.TEXTURE_COUNT + glsl.BUFFER_COUNT;\n        glsl.BUFFER_COUNT++;\n        var float_texture_ext = gl.getExtension('OES_texture_float');\n        var texture = gl.createTexture();\n        gl.activeTexture(gl.TEXTURE0 + index);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.FLOAT, null);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        var buffer = gl.createFramebuffer();\n        // console.log('createBuffer', index);\n        return {\n            index: index,\n            texture: texture,\n            buffer: buffer,\n            resize: resize,\n            W: W,\n            H: H,\n        };\n\n        function resize(W, H) {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);\n            var minW = Math.min(W, this.W);\n            var minH = Math.min(H, this.H);\n            var pixels = new Float32Array(minW * minH * 4);\n            gl.readPixels(0, 0, minW, minH, gl.RGBA, gl.FLOAT, pixels);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            // create new texture;\n            var newIndex = glsl.TEXTURE_COUNT + glsl.BUFFER_COUNT;\n            // glsl.BUFFER_COUNT++; // reuse index\n            var newTexture = gl.createTexture();\n            gl.activeTexture(gl.TEXTURE0 + newIndex);\n            gl.bindTexture(gl.TEXTURE_2D, newTexture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.FLOAT, null);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            // copy\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, minW, minH, gl.RGBA, gl.FLOAT, pixels);\n            //\n            var newBuffer = gl.createFramebuffer();\n            //\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            gl.deleteTexture(texture);\n            //\n            gl.activeTexture(gl.TEXTURE0 + index);\n            gl.bindTexture(gl.TEXTURE_2D, newTexture);\n            index = this.index = index;\n            texture = this.texture = newTexture;\n            buffer = this.buffer = newBuffer;\n            this.W = W;\n            this.H = H;\n            console.log(index, W, H);\n        }\n    }\n\n    function createSwappableBuffer(W, H, program) {\n        var glsl = this,\n            gl = glsl.gl;\n        var input = glsl.createBuffer(W, H, program);\n        var output = glsl.createBuffer(W, H, program);\n        return {\n            input: input,\n            output: output,\n            swap: function () {\n                var temp = input;\n                input = output;\n                output = temp;\n                this.input = input;\n                this.output = output;\n            },\n            render: function (W, H, program, name) {\n                gl.useProgram(program);\n                // gl.uniform1i(gl.getUniformLocation(program, name), input.index); // removable\n                gl.viewport(0, 0, W, H); // removable\n                gl.bindFramebuffer(gl.FRAMEBUFFER, input.buffer);\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, output.texture, 0);\n                gl.drawArrays(gl.TRIANGLES, 0, 6);\n                this.swap();\n            },\n            resize: function (W, H, program, name) {\n                gl.useProgram(program);\n                gl.viewport(0, 0, W, H); // removable\n                this.input.resize(W, H);\n                this.output.resize(W, H);\n            },\n        };\n    }\n\n    function createShader(glsl, source, type, offset) {\n        var gl = glsl.gl;\n        var shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n        if (!compiled) {\n            var lastError = gl.getShaderInfoLog(shader);\n            console.log(lastError);\n            console.error('*** Error compiling shader ' + shader + ':' + lastError);\n            glsl.trigger('error', {\n                shader: shader,\n                source: source,\n                type: type,\n                error: lastError,\n                offset: offset || 0,\n            });\n            gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n\n    function createProgram(glsl, shaders, optAttribs, optLocations) {\n        var gl = glsl.gl;\n        var i;\n        var program = gl.createProgram();\n        for (i = 0; i < shaders.length; ++i) {\n            gl.attachShader(program, shaders[i]);\n        }\n        if (optAttribs) {\n            for (i = 0; i < optAttribs.length; ++i) {\n                gl.bindAttribLocation(program, optLocations ? optLocations[i] : i, optAttribs[i]);\n            }\n        }\n        gl.linkProgram(program);\n        var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n        if (!linked) {\n            var lastError = gl.getProgramInfoLog(program);\n            console.log('Error in program linking:' + lastError);\n            gl.deleteProgram(program);\n            return null;\n        }\n        /*\n        program.blit = function () {\n            gl.useProgram(program);\n            gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), gl.STATIC_DRAW);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW);\n            gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n            gl.enableVertexAttribArray(0);\n            return function (destination) {\n                gl.useProgram(program);\n                gl.bindFramebuffer(gl.FRAMEBUFFER, destination);\n                // gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n                gl.drawArrays(gl.TRIANGLES, 0, 6);\n            };\n        }();\n        */\n        /*\n        var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n        for (var i = 0; i < numAttribs; ++i) {\n            var attribInfo = gl.getActiveAttrib(program, i);\n            if (!attribInfo) {\n                break;\n            }\n            console.log(gl.getAttribLocation(program, attribInfo.name), attribInfo.name);\n        }\n        */\n        return program;\n    }\n\n    function isCanvasVisible(canvas) {\n        return ((canvas.getBoundingClientRect().top + canvas.height) > 0) && (canvas.getBoundingClientRect().top < (window.innerHeight || document.documentElement.clientHeight));\n    }\n\n    /*\n    function resizeSwappableBuffer(oldXres, oldYres) {\n        var needCopy = (oldXres !== null && oldYres !== null);\n        // first time!\n        if (!needCopy) {\n            var thumnailRes = [256, 128];\n            for (var i = 0; i < this.mMaxBuffers; i++) {\n                this.mBuffers[i] = {\n                    mTexture: [null, null],\n                    mTarget: [null, null],\n                    mLastRenderDone: 0,\n                    mThumbnailRenderTarget: null,//thumbnailRenderTarget,\n                    mThumbnailTexture: null,//thumbnailTexture,\n                    mThumbnailBuffer: null,//thumbnailBuffer,\n                    mThumbnailRes: thumnailRes\n                };\n            }\n        }\n\n        // Prepare for rendering\n        if (needCopy) {\n            var v = [0, 0, Math.min(this.mXres, oldXres), Math.min(this.mYres, oldYres)];\n            this.mRenderer.SetBlend(false);\n            this.mRenderer.SetViewport(v);\n            this.mRenderer.AttachShader(this.mProgramCopy);\n            var l1 = this.mRenderer.GetAttribLocation(this.mProgramCopy, \"pos\");\n            var vOld = [0, 0, oldXres, oldYres];\n            this.mRenderer.SetShaderConstant4FV(\"v\", vOld);\n        }\n\n        // Resize each double buffer\n        for (var i = 0; i < this.mMaxBuffers; i++) {\n            var texture1 = this.mRenderer.CreateTexture(this.mRenderer.TEXTYPE.T2D,\n                this.mXres, this.mYres,\n                this.mRenderer.TEXFMT.C4F32,\n                (needCopy) ? this.mBuffers[i].mTexture[0].mFilter : this.mRenderer.FILTER.NONE,\n                (needCopy) ? this.mBuffers[i].mTexture[0].mWrap : this.mRenderer.TEXWRP.CLAMP,\n                null);\n            var target1 = this.mRenderer.CreateRenderTarget(texture1, null, null, null, null, false);\n\n            var texture2 = this.mRenderer.CreateTexture(this.mRenderer.TEXTYPE.T2D,\n                this.mXres, this.mYres,\n                this.mRenderer.TEXFMT.C4F32,\n                (needCopy) ? this.mBuffers[i].mTexture[1].mFilter : this.mRenderer.FILTER.NONE,\n                (needCopy) ? this.mBuffers[i].mTexture[1].mWrap : this.mRenderer.TEXWRP.CLAMP,\n                null);\n\n            var target2 = this.mRenderer.CreateRenderTarget(texture2, null, null, null, null, false);\n\n            if (needCopy) {\n                // Copy old buffers 1 to new buffer\n                this.mRenderer.SetRenderTarget(target1);\n                this.mRenderer.AttachTextures(1, this.mBuffers[i].mTexture[0], null, null, null);\n                this.mRenderer.DrawUnitQuad_XY(l1);\n\n                // Copy old buffers 2 to new buffer\n                this.mRenderer.SetRenderTarget(target2);\n                this.mRenderer.AttachTextures(1, this.mBuffers[i].mTexture[1], null, null, null);\n                this.mRenderer.DrawUnitQuad_XY(l1);\n\n                // Deallocate old memory\n                this.mRenderer.DestroyTexture(this.mBuffers[i].mTexture[0]);\n                this.mRenderer.DestroyRenderTarget(this.mBuffers[i].mTarget[0]);\n                this.mRenderer.DestroyTexture(this.mBuffers[i].mTexture[1]);\n                this.mRenderer.DestroyRenderTarget(this.mBuffers[i].mTarget[1]);\n                //this.mRenderer.DestroyTexture(this.mBuffers[i].thumbnailTexture);\n            }\n            // Store new buffers\n            this.mBuffers[i].mTexture = [texture1, texture2],\n                this.mBuffers[i].mTarget = [target1, target2],\n                this.mBuffers[i].mLastRenderDone = 0;\n        }\n\n        if (needCopy) {\n            this.mRenderer.DettachTextures();\n            this.mRenderer.DetachShader();\n            this.mRenderer.SetRenderTarget(null);\n        }\n\n    }\n\n    function CreateTexture(type, xres, yres, format, filter, wrap, buffer) {\n        var glsl = this,\n            gl = glsl.gl;\n        var LEN = gl.UNSIGNED_BYTE; // 16\n        // var LEN = gl.FLOAT; // 32;\n\n        var id = gl.createTexture();\n        var glFoTy = iFormatPI2GL(format);\n        var glWrap = gl.REPEAT;\n        if (wrap === me.TEXWRP.CLAMP) {\n            glWrap = gl.CLAMP_TO_EDGE;\n        }\n        if (type === me.TEXTYPE.T2D) {\n            gl.bindTexture(gl.TEXTURE_2D, id);\n            //if (buffer==null)\n            //gl.texStorage2D(gl.TEXTURE_2D, 0, gl.RGBA, xres, yres);\n            //else\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, xres, yres, 0, gl.RGBA, LEN, buffer);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, glWrap);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, glWrap);\n            if (filter === me.FILTER.NONE) {\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            } else if (filter === me.FILTER.LINEAR) {\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            } else if (filter === me.FILTER.MIPMAP) {\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n                gl.generateMipmap(gl.TEXTURE_2D);\n            } else {\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);\n                gl.generateMipmap(gl.TEXTURE_2D);\n            }\n            gl.bindTexture(gl.TEXTURE_2D, null);\n        } else if (type === me.TEXTYPE.T3D) {\n            if (mIs20) {\n                gl.bindTexture(gl.TEXTURE_3D, id);\n                gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_BASE_LEVEL, 0);\n                gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAX_LEVEL, Math.log2(xres));\n                if (filter === me.FILTER.NONE) {\n                    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                } else if (filter === me.FILTER.LINEAR) {\n                    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n                    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                } else if (filter === me.FILTER.MIPMAP) {\n                    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n                    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n                } else {\n                    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_LINEAR);\n                    gl.generateMipmap(gl.TEXTURE_3D);\n                }\n                gl.texImage3D(gl.TEXTURE_3D, 0, gl.RGBA, xres, yres, yres, 0, gl.RGBA, LEN, buffer);\n                gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_R, glWrap);\n                gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_S, glWrap);\n                gl.texParameteri(gl.TEXTURE_3D, gl.TEXTURE_WRAP_T, glWrap);\n                if (filter === me.FILTER.MIPMAP) {\n                    gl.generateMipmap(gl.TEXTURE_3D);\n                }\n                gl.bindTexture(gl.TEXTURE_3D, null);\n            } else {\n                return null;\n            }\n        } else {\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, id);\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n        }\n        return { mObjectID: id, mXres: xres, mYres: yres, mFormat: format, mType: type, mFilter: filter, mWrap: wrap, mVFlip: false };\n    };\n\n    function CreateRenderTarget(color0, color1, color2, color3, depth, wantZbuffer) {\n        var id = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, id);\n        if (depth === null) {\n            if (wantZbuffer === true) {\n                var zb = gl.createRenderbuffer();\n                gl.bindRenderbuffer(gl.RENDERBUFFER, zb);\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, color0.mXres, color0.mYres);\n\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, zb);\n            }\n        } else {\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depth.mObjectID, 0);\n        }\n        if (color0 != null) gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, color0.mObjectID, 0);\n        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {\n            return null;\n        }\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        return {\n            mObjectID: id\n        };\n    }\n    */\n\n    window.CanvasService = CanvasService;\n}());\n/* global window, document, console, CanvasService, GlslCanvas, CaptureService, GuiService, TrailsService, CameraService, Stats, dat, JSZip, saveAs, Promise */\n\n(function () {\n    'use strict';\n\n    var options = window.options = {\n        vertex: '',\n        fragment: '',\n        main: '',\n        buffers: {},\n    };\n\n    function onLoad() {\n        getResource(\"shaders/buffers/milk.glsl\", function (fragment) {\n            var source = fragment;\n            var offset;\n            options.main = null;\n            // (?<=\\/{2} u_buffer_)(\\d+).*((.|\\n)*?)(?=\\/{2} [u_buffer|main]|\\z)\n            // (?<=\\/{2} main).*((.|\\n)*?)(?=\\/{2} u_buffer|\\z)\n            fragment = fragment.replace(new RegExp('(/{2} u_buffer_)(\\\\d+).*((.|[\\\\r\\\\n]+)*?)(?=/{2} u_buffer|/{2} main|$)', 'g'), function (match, name, i, fragment, end, offset) {\n                // console.log('u_buffer_.replace', arguments);\n                offset = source.substr(0, offset).split('\\n').length;\n                // console.log('offset', offset);\n                options.buffers['u_buffer_' + i] = {\n                    fragment: fragment,\n                    offset: offset,\n                };\n                return '';\n            });\n\n            fragment = fragment.replace(new RegExp('(/{2} main).*((.|[\\\\r\\\\n]+)*)(?=/{2} u_buffer|$)', 'g'), function (match, name, main, end, offset) {\n                options.main = main;\n                return '';\n            });\n\n            var linediff = fragment.split('\\n').length;\n\n            offset = 0;\n            if (options.main) {\n                source.replace(new RegExp('(/{2} main).*((.|[\\\\r\\\\n]+)*)(?=/{2} u_buffer|$)', 'g'), function (match, name, main, end, offset) {\n                    // console.log('main.replace', arguments);\n                    offset = source.substr(0, offset).split('\\n').length - linediff;\n                    return '';\n                });\n            }\n\n            // console.log('getResource', fragment, options.buffers);\n            for (var key in options.buffers) {\n                options.buffers[key].common = fragment;\n                options.buffers[key].offset -= linediff;\n            }\n\n            options.fragment = fragment + (options.main || '');\n            options.offset = offset;\n            // console.log('fragment', options.fragment);\n            createCanvas();\n        });\n    }\n\n    function createCanvas() {\n        var content = document.querySelector('.content');\n        var canvas = document.querySelector('.shader');\n        var btnDownload = document.querySelector('.btn-download');\n\n        resize(true);\n\n        var glsl = new CanvasService(canvas, {\n            premultipliedAlpha: false,\n            preserveDrawingBuffer: true,\n            backgroundColor: 'rgba(1,1,1,1)',\n        });\n        glsl.on('error', onGlslError);\n        glsl.on('render', function () {\n            // glsl.forceRender = true;\n        });\n\n        load();\n\n        function load() {\n            var options = window.options;\n            document.querySelector('.errors').setAttribute('class', 'errors');\n            document.querySelector('.welcome').setAttribute('class', 'welcome');\n            options.vertex = options.vertex.trim().length > 0 ? options.vertex : null;\n            options.fragment = options.fragment.trim().length > 0 ? options.fragment : null;\n            if (options.fragment || options.vertex) {\n                document.querySelector('body').setAttribute('class', 'ready');\n            } else {\n                document.querySelector('body').setAttribute('class', 'empty');\n            }\n            glsl.load(options.fragment, options.vertex, options.offset);\n            glsl.loadPrograms(options.buffers);\n            glsl.loadUniforms(options);\n            // console.log('glsl', glsl);\n            /*\n            gui.load(options.uniforms);\n            glsl.setUniforms(gui.uniforms());\n            */\n        }\n\n        function resize(init) {\n            var w = content.offsetWidth;\n            var h = content.offsetHeight;\n            canvas.style.width = w + 'px';\n            canvas.style.height = h + 'px';\n            if (init) {\n                canvas.width = w;\n                canvas.height = h;\n            } else {\n                glsl.resize();\n            }\n        }\n\n        var ri;\n\n        function onResize() {\n            if (ri) {\n                clearTimeout(ri);\n            }\n            ri = setTimeout(resize, 50);\n        }\n\n        function onDownload() {\n            var urls = [\n                \"css/app.css\",\n                \"css/app.min.css\",\n                \"css/vendors.css\",\n                \"css/vendors.min.css\",\n                \"js/app.js\",\n                \"js/app.min.js\",\n                \"js/vendors.js\",\n                \"js/vendors.min.js\",\n                \"shaders/buffers/milk.glsl\",\n                \"index.html\",\n            ];\n            var zip = new JSZip();\n            Promise.all(urls.map(function (url) {\n                return new Promise(function (resolve) {\n                    var request = new XMLHttpRequest();\n                    request.open(\"GET\", url);\n                    request.onload = function () {\n                        zip.file(url, this.responseText);\n                        resolve();\n                    };\n                    request.send();\n                });\n            })).then(function () {\n                console.log(zip);\n                zip.generateAsync({\n                    type: \"blob\"\n                }).then(function (content) {\n                    /*\n                    var a = document.querySelector(\"a\");\n                    a.download = \"folder\" + new Date().getTime();\n                    a.href = URL.createObjectURL(content);\n                    a.innerHTML = \"download \" + a.download;\n                    */\n                    saveAs(content, \"glsl-canvas.zip\");\n                });\n            });\n        }\n\n        btnDownload.addEventListener('click', onDownload);\n        window.addEventListener('resize', onResize);\n\n        resize();\n    }\n\n    function onGlslError(message) {\n        console.log('onGlslError.error', message);\n        var options = window.options;\n        var errors = [],\n            warnings = [];\n        message.error.replace(/ERROR: \\d+:(\\d+): \\'(.+)\\' : (.+)/g, function (m, l, v, t) {\n            var line = Number(l) + message.offset;\n            var error = 'ERROR (' + v + ') ' + t;\n            var li = '<li><a class=\"error\" unselectable href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([options.uri, line, error])) + '\"><span class=\"line\">ERROR line ' + line + '</span> <span class=\"value\" title=\"' + v + '\">' + v + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            errors.push(li);\n            return li;\n        });\n        message.error.replace(/WARNING: \\d+:(\\d+): \\'(.*\\n*|.*|\\n*)\\' : (.+)/g, function (m, l, v, t) {\n            var line = Number(l) + message.offset;\n            var warning = 'WARNING (' + v + ') ' + t;\n            var li = '<li><a class=\"warning\" unselectable href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([options.uri, line, warning])) + '\"><span class=\"line\">WARN line ' + line + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            warnings.push(li);\n            return li;\n        });\n        var output = '<div class=\"errors-content\"><p>glslCanvas error</p><ul>';\n        output += errors.join('\\n');\n        output += warnings.join('\\n');\n        output += '</ul></div>';\n        document.querySelector('.errors').setAttribute('class', 'errors active');\n        document.querySelector('.errors').innerHTML = output;\n        document.querySelector('body').setAttribute('class', 'idle');\n    }\n\n    function getResource(url, callback) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.addEventListener('load', function () {\n            callback(request.responseText);\n        });\n        request.send();\n    }\n\n    window.addEventListener('load', onLoad);\n\n}());"]}