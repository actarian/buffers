{"version":3,"sources":["docs/js/app.js"],"names":["GlslCanvasWrapper","GlslCanvas","prototype","TEXTURE_COUNT","BUFFER_COUNT","createBuffer","W","H","program","glsl","this","gl","index","texture","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","buffer","createFramebuffer","console","log","createSwappableBuffer","input","output","swap","temp","render","name","useProgram","viewport","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","drawArrays","TRIANGLES","loadBuffers","buffers","i","vertex","createShader","vertexString","VERTEX_SHADER","key","fragment","common","FRAGMENT_SHADER","isValid","createProgram","bundle","canvas","width","height","deleteShader","loadUniforms","options","textures","uniformTexture","filtering","repeat","updateVariables","date","Date","now","performance","variables","prev","delta","load","timeLoad","time","year","getFullYear","month","getMonth","getDate","daytime","getHours","getMinutes","getSeconds","getMilliseconds","UpdateUniforms","uniform2f","getUniformLocation","nTime","uniform1f","nDelta","nDate","uniform4f","uniform1i","resizeBuffers","Object","keys","length","textureOut","textureIn","renderGl","visible","getBoundingClientRect","top","window","innerHeight","document","documentElement","clientHeight","forceRender","animated","paused","change","trigger","setMouse","mouse","rect","x","left","right","y","bottom","_resize","resize","source","type","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","lastError","getShaderInfoLog","error","shaders","optAttribs","optLocations","attachShader","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","apply","main","onGlslError","message","errors","warnings","replace","m","l","v","t","li","encodeURI","JSON","stringify","uri","Number","push","join","querySelector","setAttribute","innerHTML","addEventListener","url","callback","request","RegExp","match","content","ri","premultipliedAlpha","preserveDrawingBuffer","backgroundColor","init","w","offsetWidth","h","offsetHeight","style","on","trim","clearTimeout","setTimeout","createCanvas","XMLHttpRequest","open","responseText","send"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global window, document, console, GlslCanvas, CaptureService, GuiService, TrailsService, CameraService, Stats, dat */\n\n(function () {\n    'use strict';\n\n    var GlslCanvasWrapper = function () {\n\n        function GlslCanvasWrapper(canvas, options) {\n            return new GlslCanvas(canvas, options);\n        }\n\n        GlslCanvas.prototype.TEXTURE_COUNT = 0;\n        GlslCanvas.prototype.BUFFER_COUNT = 0;\n        GlslCanvas.prototype.createBuffer = createBuffer;\n        GlslCanvas.prototype.createSwappableBuffer = createSwappableBuffer;\n        GlslCanvas.prototype.loadBuffers = loadBuffers;\n        GlslCanvas.prototype.loadUniforms = loadUniforms;\n        GlslCanvas.prototype.updateVariables = updateVariables;\n        GlslCanvas.prototype.UpdateUniforms = UpdateUniforms;\n        GlslCanvas.prototype.resizeBuffers = resizeBuffers;\n        GlslCanvas.prototype.renderGl = renderGl;\n        GlslCanvas.prototype.render = render;\n\n        var _setMouse = GlslCanvas.prototype.setMouse;\n        GlslCanvas.prototype.setMouse = setMouse;\n\n        var _resize = GlslCanvas.prototype.resize;\n        GlslCanvas.prototype.resize = resize;\n\n        // GlslCanvas.prototype.uniform = uniform;\n\n        function createBuffer(W, H, program) {\n            var glsl = this,\n                gl = glsl.gl,\n                index = glsl.TEXTURE_COUNT + glsl.BUFFER_COUNT;\n            glsl.BUFFER_COUNT++;\n            var texture = gl.createTexture();\n            gl.activeTexture(gl.TEXTURE0 + index);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            var buffer = gl.createFramebuffer();\n            // gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);\n            /*\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n            gl.viewport(0, 0, W, H);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n            */\n            console.log('createBuffer', index);\n            return {\n                index: index,\n                texture: texture,\n                buffer: buffer,\n            };\n        }\n\n        function createSwappableBuffer(W, H, program) {\n            var glsl = this,\n                gl = glsl.gl;\n            var input = glsl.createBuffer(W, H, program);\n            var output = glsl.createBuffer(W, H, program);\n            return {\n                input: input,\n                output: output,\n                swap: function () {\n                    var temp = input;\n                    input = output;\n                    output = temp;\n                    this.input = input;\n                    this.output = output;\n                },\n                render: function (W, H, program, name) {\n                    gl.useProgram(program);\n                    // gl.uniform1i(gl.getUniformLocation(program, name), input.index); // removable\n                    gl.viewport(0, 0, W, H); // removable\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, input.buffer);\n                    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, output.texture, 0);\n                    gl.drawArrays(gl.TRIANGLES, 0, 6);\n                    /*\n                    gl.activeTexture(gl.TEXTURE0 + input.index);\n                    gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, W, H, 0);\n                    */\n                    // gl.activeTexture(gl.TEXTURE0 + output.index);\n                    // gl.clear(gl.COLOR_BUFFER_BIT);\n                    /*\n                    gl.uniform1i(gl.getUniformLocation(program, name), output.index);\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, output.buffer);\n                    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, input.texture, 0);\n                    gl.drawArrays(gl.TRIANGLES, 0, 6);\n                    this.swap();\n                    */\n                },\n            };\n        }\n\n        function loadBuffers(buffers) {\n            var glsl = this,\n                gl = glsl.gl,\n                i = 0;\n            glsl.buffers = {};\n            var vertex = createShader(glsl, glsl.vertexString, gl.VERTEX_SHADER);\n            for (var key in buffers) {\n                var buffer = buffers[key];\n                var fragment = createShader(glsl, buffer.common + buffer.fragment, gl.FRAGMENT_SHADER);\n                if (!fragment) {\n                    fragment = createShader(glsl, 'void main(){\\n\\tgl_FragColor = vec4(1.0);\\n}', gl.FRAGMENT_SHADER);\n                    glsl.isValid = false;\n                } else {\n                    glsl.isValid = true;\n                }\n                var program = createProgram(glsl, [vertex, fragment]);\n                buffer.name = 'u_buffer_' + i;\n                buffer.program = program;\n                buffer.bundle = glsl.createSwappableBuffer(glsl.canvas.width, glsl.canvas.height, program);\n                // console.log(i, key, buffer.common + buffer.fragment, buffer.bundle);\n                glsl.buffers[key] = buffer;\n                gl.deleteShader(fragment);\n                i++;\n            }\n            gl.deleteShader(vertex);\n        }\n\n        function _loadBuffers(buffers) {\n            var glsl = this,\n                gl = glsl.gl,\n                i = 0;\n            glsl.buffers = {};\n            gl.bundle = function (program, i, W, H) {\n                gl.useProgram(program);\n                var textureOut = gl.createTexture();\n                gl.activeTexture(gl.TEXTURE0 + i * 2); //           <-- out activate\n                gl.bindTexture(gl.TEXTURE_2D, textureOut);\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                var textureIn = gl.createTexture();\n                gl.activeTexture(gl.TEXTURE0 + i * 2 + 1); //       <-- in activate\n                gl.bindTexture(gl.TEXTURE_2D, textureIn);\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                var buffer = gl.createFramebuffer();\n                return {\n                    textureIn: textureIn,\n                    textureOut: textureOut,\n                    render: function (W, H) {\n                        gl.useProgram(program);\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);\n                        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureOut, 0);\n                        gl.activeTexture(gl.TEXTURE0 + i * 2); //           <-- out activate\n                        gl.bindTexture(gl.TEXTURE_2D, textureOut); //       <-- out bind\n                        gl.viewport(0, 0, W, H);\n                        gl.drawArrays(gl.TRIANGLES, 0, 6); //               <-- out draw\n                        gl.activeTexture(gl.TEXTURE0 + i * 2 + 1); //                   <-- in activate\n                        gl.bindTexture(gl.TEXTURE_2D, textureIn); //                    <-- in bind\n                        gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 0, 0, W, H, 0); // <-- in copy                        \n                    }\n                };\n            };\n\n            var vertex = createShader(glsl, glsl.vertexString, gl.VERTEX_SHADER);\n            for (var key in buffers) {\n                var buffer = buffers[key];\n                var fragment = createShader(glsl, buffer.common + buffer.fragment, gl.FRAGMENT_SHADER);\n                if (!fragment) {\n                    fragment = createShader(glsl, 'void main(){\\n\\tgl_FragColor = vec4(1.0);\\n}', gl.FRAGMENT_SHADER);\n                    glsl.isValid = false;\n                } else {\n                    glsl.isValid = true;\n                }\n                var program = createProgram(glsl, [vertex, fragment]);\n                buffer.program = program;\n                buffer.bundle = gl.bundle(program, i, glsl.canvas.width, glsl.canvas.height);\n                // console.log(i, key, buffer.common + buffer.fragment, buffer.bundle);\n                glsl.buffers[key] = buffer;\n                gl.deleteShader(fragment);\n                i++;\n            }\n            gl.deleteShader(vertex);\n        }\n\n        function resize() {\n            var glsl = this;\n            var flag = _resize.apply(glsl);\n            /*\n            if (flag) {\n                glsl.resizeBuffers();\n            }\n            */\n            return flag;\n        }\n\n        function resizeBuffers() {\n            var glsl = this,\n                gl = glsl.gl;\n            if (glsl.buffers && Object.keys(glsl.buffers).length > 0) {\n                var i = 0,\n                    W = gl.canvas.width,\n                    H = gl.canvas.height;\n                gl.viewport(0, 0, W, H);\n                for (var key in glsl.buffers) {\n                    var buffer = glsl.buffers[key];\n                    gl.useProgram(buffer.program);\n                    // \n                    gl.activeTexture(gl.TEXTURE0 + i * 2);\n                    gl.bindTexture(gl.TEXTURE_2D, buffer.bundle.textureOut);\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                    // \n                    gl.activeTexture(gl.TEXTURE0 + i * 2 + 1);\n                    gl.bindTexture(gl.TEXTURE_2D, buffer.bundle.textureIn);\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n                    i++;\n                }\n                gl.useProgram(glsl.program);\n            }\n        }\n\n        function loadUniforms(options) {\n            if (options.textures) {\n                for (var key in options.textures) {\n                    glsl.uniformTexture('u_texture_' + key, options.textures[key], {\n                        filtering: 'mipmap',\n                        repeat: true,\n                    });\n                }\n            }\n        }\n\n        function setMouse(mouse) {\n            // _setMouse(mouse);\n            var glsl = this,\n                gl = glsl.gl;\n            var rect = this.canvas.getBoundingClientRect();\n            if (mouse && mouse.x && mouse.x >= rect.left && mouse.x <= rect.right && mouse.y && mouse.y >= rect.top && mouse.y <= rect.bottom) {\n                var x = mouse.x - rect.left;\n                var y = this.canvas.height - (mouse.y - rect.top);\n                // this.uniform('2f', 'vec2', 'u_mouse', x, y);\n                if (glsl.buffers && Object.keys(glsl.buffers).length > 0) {\n                    for (var key in glsl.buffers) {\n                        var buffer = glsl.buffers[key];\n                        gl.useProgram(buffer.program);\n                        gl.uniform2f(gl.getUniformLocation(buffer.program, 'u_mouse'), x, y);\n                    }\n                }\n                gl.useProgram(glsl.program);\n                gl.uniform2f(gl.getUniformLocation(glsl.program, 'u_mouse'), x, y);\n            }\n        }\n\n        function updateVariables() {\n            var glsl = this,\n                gl = glsl.gl;\n            var date = new Date();\n            var now = performance.now();\n            glsl.variables = glsl.variables || {};\n            glsl.variables.prev = glsl.variables.prev || now;\n            glsl.variables.delta = (now - glsl.variables.prev) / 1000.0;\n            glsl.variables.prev = now;\n            glsl.variables.load = glsl.timeLoad;\n            glsl.variables.time = (now - glsl.timeLoad) / 1000.0;\n            glsl.variables.year = date.getFullYear();\n            glsl.variables.month = date.getMonth();\n            glsl.variables.date = date.getDate();\n            glsl.variables.daytime = date.getHours() * 3600 + date.getMinutes() * 60 + date.getSeconds() + date.getMilliseconds() * 0.001;\n        }\n\n        function UpdateUniforms(program, key) {\n            var glsl = this,\n                gl = glsl.gl;\n\n            gl.useProgram(program);\n\n            gl.uniform2f(gl.getUniformLocation(program, 'u_resolution'), glsl.canvas.width, glsl.canvas.height);\n\n            if (glsl.nTime > 1) {\n                gl.uniform1f(gl.getUniformLocation(program, 'u_time'), glsl.variables.time);\n            }\n\n            if (glsl.nDelta > 1) {\n                gl.uniform1f(gl.getUniformLocation(program, 'u_delta'), glsl.variables.delta);\n            }\n\n            if (glsl.nDate) {\n                // Set date uniform: year/month/day/time_in_sec\n                gl.uniform4f(gl.getUniformLocation(program, 'u_date'), glsl.variables.year, glsl.variables.month, glsl.variables.date, glsl.variables.daytime);\n            }\n\n            /*\n            glsl.texureIndex = 0;\n            for (var key in glsl.textures) {\n                glsl.uniformTexture(key, {\n                    filtering: 'mipmap',\n                    repeat: true,\n                });\n            }\n            */\n\n            for (var key in glsl.buffers) {\n                var buffer = glsl.buffers[key];\n                gl.uniform1i(gl.getUniformLocation(program, buffer.name), buffer.bundle.input.index);\n            }\n\n            /*\n            var i = 0;\n            for (var key in glsl.buffers) {\n                program.buffers = program.buffers || {};\n                if (!program.buffers[\"u_buffer_\" + i]) {\n                    program.buffers[\"u_buffer_\" + i] = true;\n                    gl.uniform1i(gl.getUniformLocation(program, \"u_buffer_\" + i), i * 2 + 1);\n                }\n                i++;\n            }\n            */\n\n            /*\n            var i = 0,\n                au = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n            while (i < au) {\n                var info = gl.getActiveUniform(program, i);\n                console.log('info', key, info);\n                i++;\n            }\n            console.log('status', key, 'link', gl.getProgramParameter(program, gl.LINK_STATUS), 'validate', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n            */\n\n            // console.log(key, 'u_time', u_time.location);\n\n        }\n\n        function renderGl() {\n            var glsl = this,\n                gl = glsl.gl,\n                W = gl.canvas.width,\n                H = gl.canvas.height;\n            glsl.updateVariables();\n            gl.viewport(0, 0, W, H);\n            if (glsl.buffers && Object.keys(glsl.buffers).length > 0) {\n                for (var key in glsl.buffers) {\n                    var buffer = glsl.buffers[key];\n                    glsl.UpdateUniforms(buffer.program, key);\n                    buffer.bundle.render(W, H, buffer.program, buffer.name);\n                    // buffer.program.blit(buffer.bundle.output.buffer);\n                    buffer.bundle.swap();\n                }\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            }\n            glsl.UpdateUniforms(glsl.program, 'main');\n            gl.drawArrays(gl.TRIANGLES, 0, 6);\n        }\n\n        function render() {\n            var glsl = this,\n                gl = glsl.gl;\n            glsl.visible = isCanvasVisible(glsl.canvas);\n            // glsl.animated = true;\n            if (glsl.forceRender || (glsl.animated && glsl.visible && !glsl.paused)) {\n                glsl.renderGl();\n                glsl.change = false;\n                glsl.forceRender = false;\n                glsl.trigger('render', {});\n            }\n        }\n\n        function createShader(glsl, source, type) {\n            var gl = glsl.gl;\n            var shader = gl.createShader(type);\n            gl.shaderSource(shader, source);\n            gl.compileShader(shader);\n            var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n            if (!compiled) {\n                var lastError = gl.getShaderInfoLog(shader);\n                console.error('*** Error compiling shader ' + shader + ':' + lastError);\n                glsl.trigger('error', {\n                    shader: shader,\n                    source: source,\n                    type: type,\n                    error: lastError\n                });\n                gl.deleteShader(shader);\n                return null;\n            }\n            return shader;\n        }\n\n        function createProgram(glsl, shaders, optAttribs, optLocations) {\n            var gl = glsl.gl;\n            var i;\n            var program = gl.createProgram();\n            for (i = 0; i < shaders.length; ++i) {\n                gl.attachShader(program, shaders[i]);\n            }\n            if (optAttribs) {\n                for (i = 0; i < optAttribs.length; ++i) {\n                    gl.bindAttribLocation(program, optLocations ? optLocations[i] : i, optAttribs[i]);\n                }\n            }\n            gl.linkProgram(program);\n            var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n            if (!linked) {\n                var lastError = gl.getProgramInfoLog(program);\n                console.log('Error in program linking:' + lastError);\n                gl.deleteProgram(program);\n                return null;\n            }\n            /*\n            program.blit = function () {\n                gl.useProgram(program);\n                gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), gl.STATIC_DRAW);\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW);\n                gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n                gl.enableVertexAttribArray(0);\n                return function (destination) {\n                    gl.useProgram(program);\n                    gl.bindFramebuffer(gl.FRAMEBUFFER, destination);\n                    // gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n                    gl.drawArrays(gl.TRIANGLES, 0, 6);\n                };\n            }();\n            */\n            /*\n            var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n            for (var i = 0; i < numAttribs; ++i) {\n                var attribInfo = gl.getActiveAttrib(program, i);\n                if (!attribInfo) {\n                    break;\n                }\n                console.log(gl.getAttribLocation(program, attribInfo.name), attribInfo.name);\n            }\n            */\n            return program;\n        }\n\n        function isCanvasVisible(canvas) {\n            return ((canvas.getBoundingClientRect().top + canvas.height) > 0) && (canvas.getBoundingClientRect().top < (window.innerHeight || document.documentElement.clientHeight));\n        }\n\n        return GlslCanvasWrapper;\n\n    }();\n\n    var options = window.options = {\n        vertex: '',\n        fragment: '',\n        main: '',\n        buffers: {},\n    };\n\n    function init() {\n        getResource(\"shaders/buffers/milk.glsl\", function (fragment) {\n            // (?<=\\/{2} u_buffer_)(\\d+).*((.|\\n)*?)(?=\\/{2} [u_buffer|main]|\\z)\n            // (?<=\\/{2} main).*((.|\\n)*?)(?=\\/{2} u_buffer|\\z)\n            fragment = fragment.replace(new RegExp('(/{2} u_buffer_)(\\\\d+).*((.|\\\\n)*?)(?=/{2} u_buffer|/{2} main|$)', 'g'), function (match, name, i, fragment) {\n                // console.log('u_buffer_.replace', arguments);\n                options.buffers['u_buffer_' + i] = {\n                    fragment: fragment,\n                };\n                return '';\n            });\n\n            fragment = fragment.replace(new RegExp('(/{2} main).*((.|\\\\n)*)(?=/{2} u_buffer|$)', 'g'), function (match, name, main) {\n                options.main = main;\n                return '';\n            });\n\n            // console.log('getResource', fragment, options.buffers);\n            for (var key in options.buffers) {\n                options.buffers[key].common = fragment;\n            }\n\n            options.fragment = fragment + (options.main || '');\n            // console.log('fragment', options.fragment);\n            createCanvas();\n        });\n    }\n\n    function createCanvas() {\n        var content = document.querySelector('.content');\n        var canvas = document.querySelector('.shader');\n\n        resize(true);\n\n        var glsl = new GlslCanvasWrapper(canvas, {\n            premultipliedAlpha: false,\n            preserveDrawingBuffer: true,\n            backgroundColor: 'rgba(1,1,1,1)',\n        });\n        glsl.animated = true;\n        glsl.on('error', onGlslError);\n        glsl.on('render', function () {\n            // glsl.forceRender = true;\n        });\n\n        load();\n\n        function load() {\n            var options = window.options;\n            document.querySelector('.errors').setAttribute('class', 'errors');\n            document.querySelector('.welcome').setAttribute('class', 'welcome');\n            options.vertex = options.vertex.trim().length > 0 ? options.vertex : null;\n            options.fragment = options.fragment.trim().length > 0 ? options.fragment : null;\n            if (options.fragment || options.vertex) {\n                document.querySelector('body').setAttribute('class', 'ready');\n            } else {\n                document.querySelector('body').setAttribute('class', 'empty');\n            }\n            glsl.load(options.fragment, options.vertex);\n            glsl.loadBuffers(options.buffers);\n            glsl.loadUniforms(options);\n\n            // console.log('glsl', glsl);\n            /*\n            gui.load(options.uniforms);\n            glsl.setUniforms(gui.uniforms());\n            */\n        }\n\n        function resize(init) {\n            var w = content.offsetWidth;\n            var h = content.offsetHeight;\n            canvas.style.width = w + 'px';\n            canvas.style.height = h + 'px';\n            if (init) {\n                canvas.width = w;\n                canvas.height = h;\n            } else {\n                glsl.resize();\n            }\n        }\n\n        var ri;\n\n        function onResize() {\n            if (ri) {\n                clearTimeout(ri);\n            }\n            ri = setTimeout(resize, 50);\n        }\n\n        window.addEventListener('resize', onResize);\n\n        resize();\n    }\n\n    function onGlslError(message) {\n        console.log('onGlslError.error', message.error);\n        var options = window.options;\n        var errors = [],\n            warnings = [];\n        message.error.replace(/ERROR: \\d+:(\\d+): \\'(.+)\\' : (.+)/g, function (m, l, v, t) {\n            var message = 'ERROR (' + v + ') ' + t;\n            var li = '<li><a class=\"error\" unselectable href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([options.uri, Number(l), message])) + '\"><span class=\"line\">ERROR line ' + Number(l) + '</span> <span class=\"value\" title=\"' + v + '\">' + v + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            errors.push(li);\n            return li;\n        });\n        message.error.replace(/WARNING: \\d+:(\\d+): \\'(.*\\n*|.*|\\n*)\\' : (.+)/g, function (m, l, v, t) {\n            var li = '<li><a class=\"warning\" unselectable href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([options.uri, Number(l), message])) + '\"><span class=\"line\">WARN line ' + Number(l) + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            warnings.push(li);\n            return li;\n        });\n        var output = '<div class=\"errors-content\"><p>glslCanvas error</p><ul>';\n        output += errors.join('\\n');\n        output += warnings.join('\\n');\n        output += '</ul></div>';\n        document.querySelector('.errors').setAttribute('class', 'errors active');\n        document.querySelector('.errors').innerHTML = output;\n        document.querySelector('body').setAttribute('class', 'idle');\n    }\n\n    function getResource(url, callback) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.addEventListener('load', function () {\n            callback(request.responseText);\n        });\n        request.send();\n    }\n\n    window.addEventListener('load', init);\n\n}());"]}