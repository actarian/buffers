{"version":3,"sources":["docs/js/app.js"],"names":["onGlslError","message","console","log","error","options","window","errors","warnings","replace","m","l","v","t","li","encodeURI","JSON","stringify","uri","Number","push","output","join","document","querySelector","setAttribute","innerHTML","vertex","fragment","getElementById","addEventListener","content","canvas","resize","ri","glsl","GlslCanvas","premultipliedAlpha","preserveDrawingBuffer","backgroundColor","init","w","offsetWidth","h","offsetHeight","style","width","height","on","forceRender","o","trim","length","load","textures","uniformTexture","filtering","repeat","clearTimeout","setTimeout"],"mappings":"CAEC,WACG,aAkFA,SAASA,EAAYC,GACjBC,QAAQC,IAAI,oBAAqBF,EAAQG,OACzC,IAAIC,EAAUC,OAAOD,QACjBE,KACAC,KACJP,EAAQG,MAAMK,QAAQ,qCAAsC,SAAUC,EAAGC,EAAGC,EAAGC,GAC3E,IAAIZ,EAAU,UAAYW,EAAI,KAAOC,EACjCC,EAAK,2CAA6CC,UAAU,sCAAwCC,KAAKC,WAAWZ,EAAQa,IAAKC,OAAOR,GAAIV,KAAa,mCAAqCkB,OAAOR,GAAK,sCAAwCC,EAAI,KAAOA,EAAI,qCAAuCC,EAAI,KAAOA,EAAI,mBAE3T,OADAN,EAAOa,KAAKN,GACLA,IAEXb,EAAQG,MAAMK,QAAQ,iDAAkD,SAAUC,EAAGC,EAAGC,EAAGC,GACvF,IAAIC,EAAK,6CAA+CC,UAAU,sCAAwCC,KAAKC,WAAWZ,EAAQa,IAAKC,OAAOR,GAAIV,KAAa,kCAAoCkB,OAAOR,GAAK,qCAAuCE,EAAI,KAAOA,EAAI,mBAErQ,OADAL,EAASY,KAAKN,GACPA,IAEX,IAAIO,EAAS,0DACbA,GAAUd,EAAOe,KAAK,MACtBD,GAAUb,EAASc,KAAK,MACxBD,GAAU,cACVE,SAASC,cAAc,WAAWC,aAAa,QAAS,iBACxDF,SAASC,cAAc,WAAWE,UAAYL,EAC9CE,SAASC,cAAc,QAAQC,aAAa,QAAS,QAnGzDnB,OAAOD,SACHsB,OAAQ,GACRC,SAAUL,SAASM,eAAe,YAAYH,WAoGlDpB,OAAOwB,iBAAiB,OAjGxB,WACI,IAAIC,EAAUR,SAASC,cAAc,YACjCQ,EAAST,SAASC,cAAc,WAEpCS,GAAO,GAEP,IAoDIC,EApDAC,EAAO,IAAIC,WAAWJ,GACtBK,oBAAoB,EACpBC,uBAAuB,EACvBC,gBAAiB,kBAoCrB,SAASN,EAAOO,GACZ,IAAIC,EAAIV,EAAQW,YACZC,EAAIZ,EAAQa,aAChBZ,EAAOa,MAAMC,MAAQL,EAAI,KACzBT,EAAOa,MAAME,OAASJ,EAAI,KACtBH,GACAR,EAAOc,MAAQL,EACfT,EAAOe,OAASJ,GAEhBR,EAAKF,SA3CbE,EAAKa,GAAG,QAAShD,GACjBmC,EAAKa,GAAG,SAAU,WACdb,EAAKc,aAAc,IAKvB,WACI,IAAIC,EAAI5C,OAAOD,QAWf,GAVAkB,SAASC,cAAc,WAAWC,aAAa,QAAS,UACxDF,SAASC,cAAc,YAAYC,aAAa,QAAS,WACzDyB,EAAEvB,OAAkC,EAAzBuB,EAAEvB,OAAOwB,OAAOC,OAAaF,EAAEvB,OAAS,KACnDuB,EAAEtB,SAAsC,EAA3BsB,EAAEtB,SAASuB,OAAOC,OAAaF,EAAEtB,SAAW,KACrDsB,EAAEtB,UAAYsB,EAAEvB,OAChBJ,SAASC,cAAc,QAAQC,aAAa,QAAS,SAErDF,SAASC,cAAc,QAAQC,aAAa,QAAS,SAEzDU,EAAKkB,KAAKH,EAAEtB,SAAUsB,EAAEvB,QACpBuB,EAAEI,SACF,IAAK,IAAIzC,KAAKqC,EAAEI,SACZnB,EAAKoB,eAAe,aAAe1C,EAAGqC,EAAEI,SAASzC,IAC7C2C,UAAW,SACXC,QAAQ,IAIpBvD,QAAQC,IAAI,OAAQgC,GAtBxBkB,GAmDA/C,OAAOwB,iBAAiB,SAPxB,WACQI,GACAwB,aAAaxB,GAEjBA,EAAKyB,WAAW1B,EAAQ,MAK5BA,MAhFR","file":"app.min.js","sourcesContent":["/* global window, document, console, GlslCanvas, CaptureService, GuiService, TrailsService, CameraService, Stats, dat */\n\n(function () {\n    'use strict';\n\n    //          (?<=\\/{2} u_buffer_)(\\d).*((.|\\n)*?)\\/{2} [u_buffer|main]|\\z\n    //          (?<=\\/{2} main).*((.|\\n)*?)\\/{2} u_buffer|\\z\n\n    window.options = {\n        vertex: '',\n        fragment: document.getElementById('fragment').innerHTML,\n    };\n\n    function onLoad() {\n        var content = document.querySelector('.content');\n        var canvas = document.querySelector('.shader');\n\n        resize(true);\n\n        var glsl = new GlslCanvas(canvas, {\n            premultipliedAlpha: false,\n            preserveDrawingBuffer: true,\n            backgroundColor: 'rgba(1,1,1,1)',\n        });\n        glsl.on('error', onGlslError);\n        glsl.on('render', function () {\n            glsl.forceRender = true;\n        });\n\n        load();\n\n        function load() {\n            var o = window.options;\n            document.querySelector('.errors').setAttribute('class', 'errors');\n            document.querySelector('.welcome').setAttribute('class', 'welcome');\n            o.vertex = o.vertex.trim().length > 0 ? o.vertex : null;\n            o.fragment = o.fragment.trim().length > 0 ? o.fragment : null;\n            if (o.fragment || o.vertex) {\n                document.querySelector('body').setAttribute('class', 'ready');\n            } else {\n                document.querySelector('body').setAttribute('class', 'empty');\n            }\n            glsl.load(o.fragment, o.vertex);\n            if (o.textures) {\n                for (var t in o.textures) {\n                    glsl.uniformTexture('u_texture_' + t, o.textures[t], {\n                        filtering: 'mipmap',\n                        repeat: true,\n                    });\n                }\n            }\n            console.log('glsl', glsl);\n            /*\n            gui.load(o.uniforms);\n            glsl.setUniforms(gui.uniforms());\n            */\n        }\n\n        function resize(init) {\n            var w = content.offsetWidth;\n            var h = content.offsetHeight;\n            canvas.style.width = w + 'px';\n            canvas.style.height = h + 'px';\n            if (init) {\n                canvas.width = w;\n                canvas.height = h;\n            } else {\n                glsl.resize();\n            }\n        }\n\n        var ri;\n\n        function onResize() {\n            if (ri) {\n                clearTimeout(ri);\n            }\n            ri = setTimeout(resize, 50);\n        }\n\n        window.addEventListener('resize', onResize);\n\n        resize();\n    }\n\n    function onGlslError(message) {\n        console.log('onGlslError.error', message.error);\n        var options = window.options;\n        var errors = [],\n            warnings = [];\n        message.error.replace(/ERROR: \\d+:(\\d+): \\'(.+)\\' : (.+)/g, function (m, l, v, t) {\n            var message = 'ERROR (' + v + ') ' + t;\n            var li = '<li><a class=\"error\" unselectable href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([options.uri, Number(l), message])) + '\"><span class=\"line\">ERROR line ' + Number(l) + '</span> <span class=\"value\" title=\"' + v + '\">' + v + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            errors.push(li);\n            return li;\n        });\n        message.error.replace(/WARNING: \\d+:(\\d+): \\'(.*\\n*|.*|\\n*)\\' : (.+)/g, function (m, l, v, t) {\n            var li = '<li><a class=\"warning\" unselectable href=\"' + encodeURI('command:glsl-canvas.revealGlslLine?' + JSON.stringify([options.uri, Number(l), message])) + '\"><span class=\"line\">WARN line ' + Number(l) + '</span> <span class=\"text\" title=\"' + t + '\">' + t + '</span></a></li>';\n            warnings.push(li);\n            return li;\n        });\n        var output = '<div class=\"errors-content\"><p>glslCanvas error</p><ul>';\n        output += errors.join('\\n');\n        output += warnings.join('\\n');\n        output += '</ul></div>';\n        document.querySelector('.errors').setAttribute('class', 'errors active');\n        document.querySelector('.errors').innerHTML = output;\n        document.querySelector('body').setAttribute('class', 'idle');\n    }\n\n    window.addEventListener('load', onLoad);\n\n}());\n\n/*\n\nShadertoy uses technique called rendering to texture. Suppose gl is our WebGL context. First we need to create a texture first pass will draw to:\n\n// desired size of the texture\nconst W = 800, H = 600;\nconst textureA = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, textureA);\n// allocate texture data.\ngl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, W, H, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n// may be change texture parameters (at least magnification and\n// minification filters since we won't render mip levels.\nThen we create framebuffer object so we can draw to our texture:\n\nconst framebufferA = gl.createFramebuffer();\ngl.bindFramebuffer(gl.FRAMEBUFFER, framebufferA);\ngl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureA, 0);\nNow we can draw:\n\ngl.bindBuffer(gl.FRAMEBUFFER, framebufferA);\ngl.viewport(0, 0, W, H);\n\n// draw first pass, the one which supposed to write data for the channel 0\n// it'll use fragment shader for bufferA\n\ngl.bindFramebuffer(gl.FRAMEBUFFER, null);\ngl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n// pass textureA as channel 0\ngl.activeTexture(gl.TEXTURE0);\ngl.bindTexture(gl.TEXTURE_2D, textureA);\ngl.uniform1i(channel0Uniform, 0);\n\n// draw second pass, the one with uses channel 0\nThere're a lot of materials about rendering to texture, for example here.\n\n*/"]}